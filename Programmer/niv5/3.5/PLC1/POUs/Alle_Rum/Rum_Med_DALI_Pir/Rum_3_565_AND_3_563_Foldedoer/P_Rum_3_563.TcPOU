<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="P_Rum_3_563" Id="{d55d204a-3591-4d4a-afea-e281aec3848b}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM P_Rum_3_563
VAR

	arrfbLysGruppe			: ARRAY [1..2] OF FB_Light_Type_A;
	arrstDaliSetupGruppe	: ARRAY[1..2] OF SH_Light.ST_DALI_RoomSetup := 
	
													[(	byShrtAdr_Prim := 30, 
														byGrpAdr_Prim := 4, 
														eMod_Prim := E_DALIAddressType.Group, 
														//byShrtAdr_Sec := 1, 
														//byGrpAdr_Sec := 1, 
														//eMod_Sec := E_DALIAddressType.Short, 
														//byShrtAdr_Supl := 1,
														//eMod_Supl := E_DALIADDRESSTYPE.Group,
                                                        //byGrpAdr_Supl := 0, 
														DALI_LINE_NUM_PRIM := arrDALI_LINE_NUM_LIGHT[1], 
														DALI_LINE_NUM_SEC := 0, //0 = ingen zonestyring/vinduerække
														DALI_LINE_NUM_SUPL := arrDALI_LINE_NUM_PENDANTS[1]),
														
													(	byShrtAdr_Prim := 28, 
														byGrpAdr_Prim := 4, 
														eMod_Prim := E_DALIAddressType.Group, 
														//byShrtAdr_Sec := 1, 
														//byGrpAdr_Sec := 1, 
														//eMod_Sec := E_DALIAddressType.Short, 
														//byShrtAdr_Supl := 1, 
														DALI_LINE_NUM_PRIM := arrDALI_LINE_NUM_LIGHT[2], 
														DALI_LINE_NUM_SEC := 0, 
														DALI_LINE_NUM_SUPL := arrDALI_LINE_NUM_PENDANTS[2])];
														
	arrstLiveDataGruppe		: ARRAY [1..2] OF SH_Light.ST_LiveData;
	//stLiveData AT %MB22	: SH_Light.ST_LiveData;
	
	arrRunTuningGruppe: ARRAY[1..2] OF BOOL;
	
	
	
	bTopButtonZone1			: BOOL;
	bTopButtonZone1_Visu	: BOOL;
	bBottomButtonZone1		: BOOL;
	bBottomButtonZone1_Visu	: BOOL;
	bButtonZone2			: BOOL;
	bNeighborRoomsPir		: BOOL;
	fLuxOn					: REAL; 
	fLuxDim					: REAL;
	tPIRDim					: TIME;
	tPIROff					: TIME;
	fOffsetSec				: REAL := 20;
    bOccupiedRoom		    : BOOL;;
//Digital In
//    bDigitalPir AT %I*      : BOOL ;    

// Sensor Settings
	//fbSensor					: SH_Light.FB_NIKO_P46xx_1Pcs;
	fbSensor					: SH_Light.FB_NIKO_P46xx_2Pcs;
	//bySensorAddr				: BYTE := 9;
	arrSensorAddr				: ARRAY[1..2] OF BYTE := [5,6];
	bInitialize					: BOOL := TRUE;
	stDaliSensorSetup			: ST_DALI_NIKOP46SetupData := (
																nSensitivityPIRSegmentA := arrSensitivityOccupancy[1],
																nSensitivityPIRSegmentB := arrSensitivityOccupancy[2],
																nSensitivityPIRSegmentC := arrSensitivityOccupancy[3]);
	//bInitErr					: BOOL;
	//bInitDone					: BOOL;
	arrInitErr					: ARRAY [1..2] OF BOOL;
    arrInitDone					: ARRAY [1..2] OF BOOL;
	arrSensorScales				: ARRAY [1..10] OF SH_Light.ST_DALI_SensorScaleMode := [	(fMeassureMaxSensor := rMeassure_Zone3, fReadMaxSensor := rRead_Zone3),		
                                                                                            (fMeassureMaxSensor := rMeassure_Zone3, fReadMaxSensor := rRead_Zone3),																	
																						8(())];
	bCancelHoldTimerOccupancy	: BOOL;
(*	eEventPriorityOccupancy		: E_DALIEventPriority := E_DALIEVENTPRIORITY.Middle;
	nHoldTimerOccupancy			: WORD := 5; // Value in s. 	
	nReportTimerOccupancy		: BYTE := 120; // Value in s, Preset manufacturer value
	nDeadtimeTimerOccupancy		: WORD := 100; // Value in ms, Predefined Value of DALI Standard
	bCancelHoldTimerOccupancy	: BOOL;
	nSensitivityOccupancy		: BYTE:= 3; //setting Sensivity (0..4) 0 (Off), 1 (Min), 2(Low), 3(High) and 4 (Max)

	bEnableLuxEvent				: BOOL;
	eEventPriorityBrightness	: E_DALIEventPriority := E_DALIEVENTPRIORITY.Middle;
	nDeadtimeTimerBrightness	: WORD := 1500; // Value in ms, Predefined Value of DALI Standard
	nHysteresisBrightness		: BYTE := 2; // Value in %
	nHysteresisMinBrightness	: BYTE := 10; // Absolute Value, depending on the manufacturer specific resolution
	nReportTimerBrightness		: BYTE := 120; // Value in s, Preset manufacturer value
*)


//ModbusComm setup
	
	fbWriteSPLuxLevel			: SH_Light.FB_TwoVal_SelectOne_RTrigChange;
	fbWritePirDelayTIme			: SH_Light.FB_TwoVal_SelectOne_RTrigChange;
	stRoomDataPLC				: SH_Light.ST_RoomDataPLC	:=	(	uiPirOffDelayTime	:= 30,
																	uiSpLuxLevel		:= 500,
																	uiPirDimDelayTime	:= 15,
																	uiSpDimLuxLevel		:= 200
																);
	fbBallastOnHours			: SH_Light.FB_CountOnHours;
	bEnableHourCount			: BOOL := TRUE;
	
	//Non-persistent modbus data
	bPirActive_MB			AT%MX62.0	: BOOL;				//bPirLys i gammel kode
	uiActLuxLevel_MB		AT%MB66	    : UINT;				//intHMIAktueltLux i gammel kode
	uiActLightLevelPct_MB	AT%MB74     : UINT;				//intDALI_Gruppe1_Lysniveau i gammel kode
	
	//For Conversion
	uiPirOffMinutes						: UINT;
	udTimeScaling						: UDINT := 60000;
	uiLuxOn								: UINT;
	
	//max values checks
	uiMaxLuxLevel						: UINT := 1023;
	uiMaxPirOffMinutes					: UINT := 180;
	
END_VAR

VAR CONSTANT
	Sensor_DALI_LINE_NUM: BYTE := 2;
	arrDALI_LINE_NUM_LIGHT: ARRAY[1..2] OF BYTE := [1,2]; //korrekt rækkefølge nødvendig //rækkefølge og linje 
	arrDALI_LINE_NUM_PENDANTS: ARRAY[1..2] OF BYTE := [0,0]; //korrekt rækkefølge nødvendig. 0 = ingen pendler
	arrSensitivityOccupancy				: ARRAY[1..3] OF BYTE := [4,4,4];
END_VAR
VAR PERSISTENT
	stPirSensorData: SH_Light.ST_DALI_Sensor;
	arrstTuneDataGruppe: ARRAY [1..2] OF SH_Light.ST_TuneData_EX;

	uiPirOffDelayTime_MB	AT%MB64	    : UINT;				//intHMI_Pir_SetValue i gammel kode
	uiSPLuxLevel_MB		    AT%MB70     : UINT;				//intHMI_Lux_SetValue i gammel kode
	uiBallastOnHours_MB	    AT%MB78	    : UINT;				//dintHMILysbraendtimer1 i gammel kode
	byOnHoursOverflowCount			    : BYTE;
END_VAR

///////)]]></Declaration>
    <Implementation>
      <ST><![CDATA[A_Buttons();
A_LightCtrl();
A_ModbusComm();
A_Sensor();
]]></ST>
    </Implementation>
    <Action Name="A_Buttons" Id="{33fc51f1-9798-4038-a3dd-70bbb8cefe1e}">
      <Implementation>
        <ST><![CDATA[bTopButtonZone1		:= P_Foldedoer_3_565.arrTopButtonZone1comb[1] OR bTopButtonZone1_Visu;
bBottomButtonZone1	:= P_Foldedoer_3_565.arrBottomButtonZone1Comb[1] OR bBottomButtonZone1_Visu;

]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_LightCtrl" Id="{bfee3e6f-2b32-4a6d-a15c-6f7ddee24553}">
      <Implementation>
        <ST><![CDATA[
//gruppe 6
arrfbLysGruppe[1]( 
	nZoneID:= 1, 
	bButtonZone1:= bTopButtonZone1,
	bBottomButtonZone1 := bBottomButtonZone1,
	bTopButtonOverride := P_Foldedoer_3_565.bOverride,
	//bButtonZone2:= bButtonZone2,
	fLuxOn:= fLuxOn, 
	fLuxDim:= fLuxDim, 
	tPIRDim:= tPIRDim, 
	tPIROff:= tPIROff, 
	fOffsetSec:= fOffsetSec, 
	bReInit:= , 
	stDaliSetup:= arrstDaliSetupGruppe[1], 
	ipCommunication_Prim:= P_DALI_Background.arrfbKL6821Communication[arrDALI_LINE_NUM_LIGHT[1]], 
	//ipCommunication_Sec:= P_DALI_Background.arrfbKL6821Communication[arrDALI_LINE_NUM_LIGHT[1]], //samme som lyslinjen, hvis den ikke eksisterer
	//ipCommunication_Supl:= P_DALI_Background.arrfbKL6821Communication[arrDALI_LINE_NUM_LIGHT[1]],//samme som lyslinjen, hvis den ikke eksisterer 
	fMinOutputPowerLevelRoom:= 15, 
	fMaxOutputPowerLevelRoom:= 100, 
	nCycleTimeInMS:= SH_Light.DALI_Param.nPlcTaskCycleTimeInMS*nDimCmdCycleTimeFactor,  //Used only for dim. Factor=2 makes dimming smooth
	bRunTuning:= arrRunTuningGruppe[1], 
	bOccupiedRoom=> , 
	bError_Prim=> , 
	nError_Prim=> , 
	stTuneData:=arrstTuneDataGruppe[1] , 
	stPirSensorData:= P_Foldedoer_3_565.arrstPirSensorDataComb[1], 					//samme sensordata
	stLiveData:= arrstLiveDataGruppe[1]);

//gruppe 15	
arrfbLysGruppe[2]( 
	nZoneID:= 1, 
	bButtonZone1:= bTopButtonZone1,
	bBottomButtonZone1 := bBottomButtonZone1,
	bTopButtonOverride := P_Foldedoer_3_565.bOverride,
	//bButtonZone2:= bButtonZone2,
	fLuxOn:= fLuxOn, 
	fLuxDim:= fLuxDim, 
	tPIRDim:= tPIRDim, 
	tPIROff:= tPIROff, 
	fOffsetSec:= fOffsetSec, 
	bReInit:= , 
	stDaliSetup:= arrstDaliSetupGruppe[2], 
	ipCommunication_Prim:= P_DALI_Background.arrfbKL6821Communication[arrDALI_LINE_NUM_LIGHT[2]], 
	//ipCommunication_Sec:= P_DALI_Background.arrfbKL6821Communication[arrDALI_LINE_NUM_LIGHT[2]], //samme som lyslinjen, hvis den ikke eksisterer
	//ipCommunication_Supl:= P_DALI_Background.arrfbKL6821Communication[arrDALI_LINE_NUM_LIGHT[2]], //samme som lyslinjen, hvis den ikke eksisterer 
	fMinOutputPowerLevelRoom:= 15, 
	fMaxOutputPowerLevelRoom:= 100, 
	nCycleTimeInMS:= SH_Light.DALI_Param.nPlcTaskCycleTimeInMS*nDimCmdCycleTimeFactor,  //Used only for dim. Factor=2 makes dimming smooth
	bRunTuning:= arrRunTuningGruppe[2], 
	bOccupiedRoom=> , 
	bError_Prim=> , 
	nError_Prim=> , 
	stTuneData:=arrstTuneDataGruppe[2] , 
	stPirSensorData:= P_Foldedoer_3_565.arrstPirSensorDataComb[1], 					//samme sensordata
	stLiveData:= arrstLiveDataGruppe[2]);	]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_ModbusComm" Id="{f5509a90-2bce-494b-b63f-4cd82eea23b0}">
      <Implementation>
        <ST><![CDATA[//Manage data for modbus communication

//Manage data for read-only in PLC
stRoomDataPLC.bPirActive			:= stPirSensorData.bPrc;
stRoomDataPLC.uiActLuxLevel			:= TO_UINT(TRUNC(stPirSensorData.fBrightness));
stRoomDataPLC.uiActLightLevelPct	:= TO_UINT(TRUNC(arrfbLysGruppe[1].fbBallast.fActlLgtLvl_Prim));
		//stRoomDataPLC.uiActLightLevelPct	:= TO_UINT(TRUNC(fbLys.fbBallast.fActlLgtLvl_Prim)); //if only one group light control
stRoomDataPLC.uiBallastOnHours		:= uiBallastOnHours_MB; //The calculation for BallastOnHours is stored directly to the MB register below


//Assign data for read-only to MB registers
bPirActive_MB		:= stRoomDataPLC.bPirActive;
uiActLuxLevel_MB	:= stRoomDataPLC.uiActLuxLevel;

	//calculate BallastOnHours
	fbBallastOnHours(
		bEnableHourCount	:= bEnableHourCount,
		bPauseCount			:= arrfbLysGruppe[1].fbLightCtrl.bOffZone1,
		uiOnHours			:= uiBallastOnHours_MB,			//OnHours is updated here
		byOverflowCount		:= byOnHoursOverflowCount);


//Manage data for read/write for both PLC and MB registers
fbWriteSPLuxLevel(	nMaxValOut	:= uiMaxLuxLevel,
					nValIn1		:= uiSPLuxLevel_MB,		//nValIn1 takes priotity in case of download or restart
					nValIn2		:= stRoomDataPLC.uiSpLuxLevel,
					nValOut		=> uiLuxOn
				);


fbWritePirDelayTIme(	nMaxValOut	:= uiMaxPirOffMinutes,
						nValIn1		:= uiPirOffDelayTime_MB,		//nValIn1 takes priotity in case of download or restart
						nValIn2		:= stRoomDataPLC.uiPirOffDelayTime,
						nValOut		=> uiPirOffMinutes
					);
					

//Convert read/write modbus data to appropriate datatypes in PLC
fLuxOn	:= TO_REAL(uiLuxOn);			
tPIROff	:= TO_TIME(uiPirOffMinutes*udTimeScaling); //Time conversion defaults to ms

fLuxDim	:= TO_REAL(stRoomDataPLC.uiSpDimLuxLevel);			
tPIRDim	:= TO_TIME(stRoomDataPLC.uiPirDimDelayTime*udTimeScaling); //Time conversion defaults to ms
]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_Sensor" Id="{1d08911d-c304-4b3c-82da-169dda0d04aa}">
      <Implementation>
        <ST><![CDATA[
fbSensor.ipCommunication := P_DALI_Background.arrfbKL6821Communication[Sensor_DALI_LINE_NUM];


(*fbSensor(
	byShrtAdr:= bySensorAddr,
	bInitialize:= bInitialize, 
	DALI_LINE_NUM:= Sensor_DALI_LINE_NUM, 
 	//bCancelHoldTimerOccupancy:= bCancelHoldTimerOccupancy, 
	stSensorSetup := stDaliSensorSetup,
	bInitErr=> bInitErr, 
	bInitDone=> bInitDone,
	stPirSensorData:= stPirSensorData, 
	arrSensorScales:= arrSensorScales);*)


fbSensor(
	arrShrtAdr:= arrSensorAddr,
	bInitialize:= bInitialize, 
	DALI_LINE_NUM:= Sensor_DALI_LINE_NUM, 
 	//bCancelHoldTimerOccupancy:= bCancelHoldTimerOccupancy, 
	stSensorSetup := stDaliSensorSetup,
	arrInitErr=> arrInitErr, 
	arrInitDone=> arrInitDone,
	stPirSensorData:= P_Foldedoer_3_565.arrstPirSensorData[1], 
	arrSensorScales:= arrSensorScales);
	
	stPirSensorData := P_Foldedoer_3_565.arrstPirSensorData[1]; //For at holde samme navngivning i A_ModbusComm
	
	]]></ST>
      </Implementation>
    </Action>
  </POU>
</TcPlcObject>