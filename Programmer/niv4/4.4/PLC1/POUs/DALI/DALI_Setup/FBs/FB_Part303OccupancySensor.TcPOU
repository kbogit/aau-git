<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_Part303OccupancySensor" Id="{eeefa5db-3643-4787-840e-4d4b7a78151c}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Part303OccupancySensor
VAR_INPUT
	ipDALICommunication			:	I_DALICommunication;
END_VAR
VAR_OUTPUT
	bBusy						:	BOOL;
END_VAR
VAR
{region "Visu"}
	sInputValue					:	STRING (50);
	nInstanceError				:	BYTE;
	nResolution					:	BYTE;
	eEventScheme				:	E_DALIEventScheme;
	nEventFilter				:	DWORD;
	nHold						:	UINT(1..2538);
	nHoldIntern					:	BYTE;
	nReport						:	BYTE(0..255);
	nDeadtime					:	UINT(0..12750);
	nDeadtimeIntern				:	BYTE;
	sCatching					:	STRING (20);
	bEnable						:	BOOL;
	bCancelHoldTimer			:	BOOL;
	bCatchmovement				:	BOOL;
	bRead						:	BOOL;
	bWrite						:	BOOL;
	bOccupied					:	BOOL;
	bVacant						:	BOOL;
	bRepeat						:	BOOL;
	bMovement					:	BOOL;
	bNoMovement					:	BOOL;
	bNoHoldTimer				:	BOOL;
	bNoReportTimer				:	BOOL;
	bNoDeadtimeTimer			:	BOOL;
	eEventPriority				:	E_DALIEventPriority := E_DALIEventPriority.MiddleLow;
{endregion}
	nStep						:	INT;
	nAddress					:	BYTE;
	nInstanceAddress			:	BYTE;
	bHideWaitSymbol				:	BOOL := TRUE;

	fb103StartQuiescentMode		:	FB_DALI103StartQuiescentMode(0);
	fb103StopQuiescentMode		:	FB_DALI103StopQuiescentMode(0);
	fb103QueryInstanceError		:	FB_DALI103QueryInstanceError(0);
	fb103QueryInstanceStatus	:	FB_DALI103QueryInstanceStatus(0);
	fb103QueryResolution		:	FB_DALI103QueryResolution(0);
	fb103QueryInputValue 		:	FB_DALI103QueryInputValue(0);
	fb103QueryEventScheme 		:	FB_DALI103QueryEventScheme(0);
	fb103QueryEventFilter 		:	FB_DALI103QueryEventFilter(0);
	fb103QueryEventPriority		:	FB_DALI103QueryEventPriority(0);
	fb303QueryCatching			:	FB_DALI303QueryCatching(0);
	fb303QueryHoldTimer			:	FB_DALI303QueryHoldTimer(0);
	fb303QueryReportTimer		:	FB_DALI303QueryReportTimer(0);
	fb303QueryDeadtimeTimer		:	FB_DALI303QueryDeadtimeTimer(0);
	fb103EnableInstance			:	FB_DALI103EnableInstance(0);
	fb103DisableInstance		:	FB_DALI103DisableInstance(0);
	fb103SetEventScheme			:	FB_DALI103SetEventScheme(0);
	fb103SetEventFilter			:	FB_DALI103SetEventFilter(0);
	fb103SetEventPriority		:	FB_DALI103SetEventPriority(0);
	fb303SetHoldTimer			:	FB_DALI303SetHoldTimer(0);
	fb303SetReportTimer			:	FB_DALI303SetReportTimer(0);
	fb303SetDeadtimeTimer		:	FB_DALI303SetDeadtimeTimer(0);
	fb303CancelHoldTimer		:	FB_DALI303CancelHoldTimer(0);
	fb303CatchMovement			:	FB_DALI303CatchMovement(0);
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[{region "Detect Commands"}
IF (bRead AND (nStep = 0)) THEN
	nStep := 5;
	bRead := FALSE;
	bHideWaitSymbol := FALSE;
END_IF

IF (bWrite AND (nStep = 0)) THEN
	nStep := 1000;
	bWrite := FALSE;
	bHideWaitSymbol := FALSE;
END_IF
{endregion}
{region "Manage Dialog Selection}
IF (nStep = 0) THEN
	bBusy := FALSE;
ELSE
	bBusy := TRUE;
END_IF
{endregion}
{region "Execute Commands"}
CASE nStep OF
0:
{region "Init"}
	bRead := FALSE;
	bWrite := FALSE;
	bHideWaitSymbol := TRUE;

	fb103StartQuiescentMode.ipDALICommunication := ipDALICommunication;
	fb103StopQuiescentMode.ipDALICommunication := ipDALICommunication;
	fb103QueryInstanceError.ipDALICommunication := ipDALICommunication;
	fb103QueryInstanceStatus.ipDALICommunication := ipDALICommunication;
	fb103QueryResolution.ipDALICommunication := ipDALICommunication;
	fb103QueryInputValue.ipDALICommunication := ipDALICommunication;
	fb103QueryEventScheme.ipDALICommunication := ipDALICommunication;
	fb103QueryEventFilter.ipDALICommunication := ipDALICommunication;
	fb103QueryEventPriority.ipDALICommunication := ipDALICommunication;
	fb303QueryCatching.ipDALICommunication := ipDALICommunication;
	fb303QueryHoldTimer.ipDALICommunication := ipDALICommunication;
	fb303QueryReportTimer.ipDALICommunication := ipDALICommunication;
	fb303QueryDeadtimeTimer.ipDALICommunication := ipDALICommunication;
	fb103EnableInstance.ipDALICommunication := ipDALICommunication;
	fb103DisableInstance.ipDALICommunication := ipDALICommunication;
	fb103SetEventScheme.ipDALICommunication := ipDALICommunication;
	fb103SetEventFilter.ipDALICommunication := ipDALICommunication;
	fb103SetEventPriority.ipDALICommunication := ipDALICommunication;
	fb303SetHoldTimer.ipDALICommunication := ipDALICommunication;
	fb303SetReportTimer.ipDALICommunication := ipDALICommunication;
	fb303SetDeadtimeTimer.ipDALICommunication := ipDALICommunication;
	fb303CancelHoldTimer.ipDALICommunication := ipDALICommunication;
	fb303CatchMovement.ipDALICommunication := ipDALICommunication;
{endregion}
{region "Read"}
5:
{region "Start Qiescent Mode"}
	fb103StartQuiescentMode(bStart := TRUE,
							eAddressType := Tc3_DALI.E_DALIAddressType.Broadcast,
							eCommandPriority := Tc3_DALI.E_DALICommandPriority.Middle);
	IF (NOT fb103StartQuiescentMode.bBusy) THEN
		fb103StartQuiescentMode(bStart:= FALSE);
		nStep := 10;
	END_IF
{endregion}
10:
{region "Query Instance Error"}
	fb103QueryInstanceError(bStart := TRUE,
							nAddress := nAddress,
							eAddressType := Tc3_DALI.E_DALIAddressType.Short,
							nInstanceAddress := nInstanceAddress,
							eInstanceAddressType := Tc3_DALI.E_DALIInstanceAddressType.InstanceNumber,
							eCommandPriority := Tc3_DALI.E_DALICommandPriority.Middle,
							nInstanceError => nInstanceError);
	IF (NOT fb103QueryInstanceError.bBusy) THEN
		fb103QueryInstanceError(bStart := FALSE);
		nStep := 20;
	END_IF
{endregion}
20:
{region "Query Instance Status"}
	fb103QueryInstanceStatus(	bStart := TRUE,
								nAddress := nAddress,
								eAddressType := Tc3_DALI.E_DALIAddressType.Short,
								nInstanceAddress := nInstanceAddress,
								eInstanceAddressType := Tc3_DALI.E_DALIInstanceAddressType.InstanceNumber,
								eCommandPriority := Tc3_DALI.E_DALICommandPriority.Middle);
	IF (NOT fb103QueryInstanceStatus.bBusy) THEN
		fb103QueryInstanceStatus(bStart := FALSE);
		IF (fb103QueryInstanceStatus.nInstanceStatus.1) THEN
			bEnable := TRUE;
		END_IF
		nStep := 30;
	END_IF
30:
{region "Query Resolution"}
	fb103QueryResolution(	bStart := TRUE,
							nAddress := nAddress,
							eAddressType := Tc3_DALI.E_DALIAddressType.Short,
							nInstanceAddress := nInstanceAddress,
							eInstanceAddressType := Tc3_DALI.E_DALIInstanceAddressType.InstanceNumber,
							eCommandPriority := Tc3_DALI.E_DALICommandPriority.Middle,
							nResolution => nResolution);
	IF (NOT fb103QueryResolution.bBusy) THEN
		fb103QueryResolution(bStart := FALSE);
		nStep := 40;
	END_IF
{endregion}
40:
{region "Query Input Value"}
	fb103QueryInputValue(	bStart := TRUE,
							nAddress := nAddress,
							eAddressType := Tc3_DALI.E_DALIAddressType.Short,
							nInstanceAddress := nInstanceAddress,
							eInstanceAddressType := Tc3_DALI.E_DALIInstanceAddressType.InstanceNumber,
							eCommandPriority := Tc3_DALI.E_DALICommandPriority.Middle,
							nResolution := nResolution);
	IF (NOT fb103QueryInputValue.bBusy) THEN
		fb103QueryInputValue(bStart:= FALSE);
		IF (fb103QueryInputValue.nInputValue = 0) THEN
			sInputValue := 'Vacant and no movement';
		ELSIF (fb103QueryInputValue.nInputValue = 1) THEN
			sInputValue := 'Vacant and movement';
		ELSIF (fb103QueryInputValue.nInputValue = 2) THEN
			sInputValue := 'Occupied and no movement';
		ELSIF (fb103QueryInputValue.nInputValue = 3) THEN
			sInputValue := 'Occupied and movement';
		END_IF
		nStep := 50;
	END_IF
{endregion}
50:
{region "Query Event Scheme"}
	fb103QueryEventScheme(	bStart := TRUE,
							nAddress := nAddress,
							eAddressType := Tc3_DALI.E_DALIAddressType.Short,
							nInstanceAddress := nInstanceAddress,
							eInstanceAddressType := Tc3_DALI.E_DALIInstanceAddressType.InstanceNumber,
							eCommandPriority := Tc3_DALI.E_DALICommandPriority.Middle,
							eEventScheme => eEventScheme);
	IF (NOT fb103QueryEventScheme.bBusy) THEN
		fb103QueryEventScheme(bStart := FALSE);
		nStep := 60;
	END_IF
{endregion}
60:
{region "Query Event Filter"}
	fb103QueryEventFilter(	bStart := TRUE,
							nAddress := nAddress,
							eAddressType := Tc3_DALI.E_DALIAddressType.Short,
							nInstanceAddress := nInstanceAddress,
							eInstanceAddressType := Tc3_DALI.E_DALIInstanceAddressType.InstanceNumber,
							eCommandPriority := Tc3_DALI.E_DALICommandPriority.Middle,
							nEventFilter => nEventFilter);
	IF (NOT fb103QueryEventFilter.bBusy) THEN
		fb103QueryEventFilter(bStart := FALSE);
		bOccupied := nEventFilter.0;
		bVacant := nEventFilter.1;
		bRepeat := nEventFilter.2;
		bMovement := nEventFilter.3;
		bNoMovement := nEventFilter.4;
		nStep := 70;
	END_IF
{endregion}
70: 
{region "Query Catching"}
	fb303QueryCatching(	bStart := TRUE,
						nAddress := nAddress,
						eAddressType := Tc3_DALI.E_DALIAddressType.Short,
						nInstanceAddress := nInstanceAddress,
						eInstanceAddressType := Tc3_DALI.E_DALIInstanceAddressType.InstanceNumber,
						eCommandPriority := Tc3_DALI.E_DALICommandPriority.Middle);
	IF (NOT fb303QueryCatching.bBusy) THEN
		fb303QueryCatching(bStart := FALSE);
		IF (fb303QueryCatching.bCatching) THEN
			sCatching := 'Active';
		ELSE
			sCatching := 'Inactive';
		END_IF
		nStep := 80;
	END_IF
80:
{region "Query Hold Timer"}
	fb303QueryHoldTimer(bStart := TRUE,
						nAddress := nAddress,
						eAddressType := Tc3_DALI.E_DALIAddressType.Short,
						nInstanceAddress := nInstanceAddress,
						eInstanceAddressType := Tc3_DALI.E_DALIInstanceAddressType.InstanceNumber,
						eCommandPriority := Tc3_DALI.E_DALICommandPriority.Middle,
						nHold => nHoldIntern);
	nHold := nHoldIntern * 10;
	IF (NOT fb303QueryHoldTimer.bBusy) THEN
		fb303QueryHoldTimer(bStart := FALSE);
		nStep := 90;
	END_IF
{endregion}
90:
{region "Query Report Timer"}
	fb303QueryReportTimer(	bStart := TRUE,
							nAddress := nAddress,
							eAddressType := Tc3_DALI.E_DALIAddressType.Short,
							nInstanceAddress := nInstanceAddress,
							eInstanceAddressType := Tc3_DALI.E_DALIInstanceAddressType.InstanceNumber,
							eCommandPriority := Tc3_DALI.E_DALICommandPriority.Middle,
							nReport => nReport);
	IF (NOT fb303QueryReportTimer.bBusy) THEN
		fb303QueryReportTimer(bStart := FALSE);
		nStep := 100;
	END_IF
{endregion}
100:
{region "Query Deadtime Timer"}
	fb303QueryDeadtimeTimer(bStart := TRUE,
							nAddress := nAddress,
							eAddressType := Tc3_DALI.E_DALIAddressType.Short,
							nInstanceAddress := nInstanceAddress,
							eInstanceAddressType := Tc3_DALI.E_DALIInstanceAddressType.InstanceNumber,
							eCommandPriority := Tc3_DALI.E_DALICommandPriority.Middle,
							nDeadtime => nDeadtimeIntern);
	nDeadtime := (nDeadtimeIntern * 50);
	IF (NOT fb303QueryDeadtimeTimer.bBusy) THEN
		fb303QueryDeadtimeTimer(bStart := FALSE);
		nStep := 110;
	END_IF
{endregion}
110:
{region "Query Event Priority"}
	fb103QueryEventPriority(bStart := TRUE,
							nAddress := nAddress,
							eAddressType := Tc3_DALI.E_DALIAddressType.Short,
							nInstanceAddress := nInstanceAddress,
							eInstanceAddressType := Tc3_DALI.E_DALIInstanceAddressType.InstanceNumber,
							eCommandPriority := Tc3_DALI.E_DALICommandPriority.Middle,
							eEventPriority => eEventPriority);
	IF (NOT fb103QueryEventPriority.bBusy) THEN
		fb103QueryEventPriority(bStart := FALSE);
		nStep := 120;
	END_IF 
{endregion}
120:
{region "Stop Qiescent Mode"}
	fb103StopQuiescentMode(	bStart:= TRUE,
							eAddressType:= Tc3_DALI.E_DALIAddressType.Broadcast,
							eCommandPriority:= Tc3_DALI.E_DALICommandPriority.Middle);
	IF (NOT fb103StopQuiescentMode.bBusy) THEN
		fb103StopQuiescentMode(bStart := FALSE);
		nStep := 0;
	END_IF
{endregion}

{region "Write"}
1000:
{region "Enable Instance"}
	IF (bEnable) THEN	
		fb103EnableInstance(bStart := TRUE,
							nAddress := nAddress,
							eAddressType := Tc3_DALI.E_DALIAddressType.Short,
							nInstanceAddress := nInstanceAddress,
							eInstanceAddressType := Tc3_DALI.E_DALIInstanceAddressType.InstanceNumber,
							eCommandPriority := Tc3_DALI.E_DALICommandPriority.Middle);
		IF (NOT fb103EnableInstance.bBusy) THEN
			fb103EnableInstance(bStart := FALSE);
			nStep := 1010;
		END_IF
	ELSE
		fb103DisableInstance(	bStart := TRUE,
								nAddress := nAddress,
								eAddressType := Tc3_DALI.E_DALIAddressType.Short,
								nInstanceAddress := nInstanceAddress,
								eInstanceAddressType := Tc3_DALI.E_DALIInstanceAddressType.InstanceNumber,
								eCommandPriority := Tc3_DALI.E_DALICommandPriority.Middle);
		IF (NOT fb103DisableInstance.bBusy) THEN
			fb103DisableInstance(bStart := FALSE);
			nStep := 0;
		END_IF
	END_IF
{endregion}
1010:
{region "Set Event Scheme"}
	fb103SetEventScheme(bStart := TRUE,
						nAddress := nAddress,
						eAddressType := Tc3_DALI.E_DALIAddressType.Short,
						nInstanceAddress := nInstanceAddress,
						eInstanceAddressType := Tc3_DALI.E_DALIInstanceAddressType.InstanceNumber,
						eCommandPriority := Tc3_DALI.E_DALICommandPriority.Middle,
						eEventScheme := eEventScheme);
	IF (NOT fb103SetEventScheme.bBusy) THEN
		fb103SetEventScheme(bStart := FALSE);
		nStep := 1020;
	END_IF
{endregion}
1020:
{region "Set Event Filter"}
	nEventFilter.0 := bOccupied;
	nEventFilter.1 := bVacant;
	nEventFilter.2 := bRepeat;
	nEventFilter.3 := bMovement;
	nEventFilter.4 := bNoMovement;
	fb103SetEventFilter(bStart := TRUE,
						nAddress := nAddress,
						eAddressType := Tc3_DALI.E_DALIAddressType.Short,
						nInstanceAddress := nInstanceAddress,
						eInstanceAddressType := Tc3_DALI.E_DALIInstanceAddressType.InstanceNumber,
						eCommandPriority := Tc3_DALI.E_DALICommandPriority.Middle,
						nEventFilter := nEventFilter);
	IF (NOT fb103SetEventFilter.bBusy) THEN
		fb103SetEventFilter(bStart := FALSE);
		nStep := 1030;
	END_IF
{endregion}
1030:
{region "Set Hold Timer"}
	IF (bNoHoldTimer) THEN
		nStep := 1040;
	ELSE
		fb303SetHoldTimer(	bStart := TRUE,
							nAddress := nAddress,
							eAddressType := Tc3_DALI.E_DALIAddressType.Short,
							nInstanceAddress := nInstanceAddress,
							eInstanceAddressType := Tc3_DALI.E_DALIInstanceAddressType.InstanceNumber,
							eCommandPriority := Tc3_DALI.E_DALICommandPriority.Middle,
							nHold := TO_BYTE(nHold / 10));
		IF (NOT fb303SetHoldTimer.bBusy) THEN
			fb303SetHoldTimer(bStart := FALSE);
			nStep := 1040;
		END_IF
	END_IF
{endregion}
1040:
{region "Set Report Timer"}
	IF (bNoReportTimer) THEN
		nStep := 1050;
	ELSE
		fb303SetReportTimer(bStart := TRUE,
							nAddress := nAddress,
							eAddressType := Tc3_DALI.E_DALIAddressType.Short,
							nInstanceAddress := nInstanceAddress,
							eInstanceAddressType := Tc3_DALI.E_DALIInstanceAddressType.InstanceNumber,
							eCommandPriority := Tc3_DALI.E_DALICommandPriority.Middle,
							nReport := nReport);
		IF (NOT fb303SetReportTimer.bBusy) THEN
			fb303SetReportTimer(bStart := FALSE);
			nStep := 1050;
		END_IF
	END_IF
{endregion}
1050:
{region "Set Deadtime Timer"}
	IF (bNoDeadtimeTimer) THEN
		nStep := 1060;
	ELSE
		fb303SetDeadtimeTimer(	bStart := TRUE,
								nAddress := nAddress,
								eAddressType := Tc3_DALI.E_DALIAddressType.Short,
								nInstanceAddress := nInstanceAddress,
								eInstanceAddressType := Tc3_DALI.E_DALIInstanceAddressType.InstanceNumber,
								eCommandPriority := Tc3_DALI.E_DALICommandPriority.Middle,
								nDeadtime := TO_BYTE(nDeadtime / 50));
		IF (NOT fb303SetDeadtimeTimer.bBusy) THEN
			fb303SetDeadtimeTimer(bStart := FALSE);
			nStep := 1060;
		END_IF
	END_IF
{endregion}
1060:
{region "Set Event Priority"}
	fb103SetEventPriority(	bStart := TRUE,
							nAddress := nAddress,
							eAddressType := Tc3_DALI.E_DALIAddressType.Short,
							nInstanceAddress := nInstanceAddress,
							eInstanceAddressType := Tc3_DALI.E_DALIInstanceAddressType.InstanceNumber,
							eCommandPriority := Tc3_DALI.E_DALICommandPriority.Middle,
							eEventPriority := eEventPriority);
	IF (NOT fb103SetEventPriority.bBusy) THEN
		fb103SetEventPriority(bStart := FALSE);
		nStep := 0;
	END_IF
{endregion}
END_CASE
{endregion}
{endregion}

{region "Cancel Hold Timer"}
IF (bCancelHoldTimer) THEN
	fb303CancelHoldTimer(bStart := TRUE);
END_IF
fb303CancelHoldTimer(	nAddress := nAddress,
						eAddressType := Tc3_DALI.E_DALIAddressType.Short,
						nInstanceAddress := nInstanceAddress,
						eInstanceAddressType := Tc3_DALI.E_DALIInstanceAddressType.InstanceNumber,
						eCommandPriority := Tc3_DALI.E_DALICommandPriority.Middle);
IF (NOT fb303CancelHoldTimer.bBusy) THEN
	bCancelHoldTimer := FALSE;
	fb303CancelHoldTimer(bStart := FALSE);
END_IF
{endregion}

{region "Catch Movement"}
IF (bCatchMovement) THEN
	fb303CatchMovement(bStart := TRUE);
END_IF
fb303CatchMovement(	nAddress := nAddress,
					eAddressType := Tc3_DALI.E_DALIAddressType.Short,
					nInstanceAddress := nInstanceAddress,
					eInstanceAddressType := Tc3_DALI.E_DALIInstanceAddressType.InstanceNumber,
					eCommandPriority := Tc3_DALI.E_DALICommandPriority.Middle);
IF (NOT fb303CatchMovement.bBusy) THEN
	bCatchMovement := FALSE;
	fb303CatchMovement(bStart := FALSE);
END_IF
{endregion}
]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>