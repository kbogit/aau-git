<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="P_Gang_3_458" Id="{a8c896d6-599d-45cb-b1f8-2dde8c8d9399}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM P_Gang_3_458
VAR
//Light

	
	arrfbLysGruppe			: ARRAY [1..2] OF FB_Light_Type_B;
	arrstDaliSetupGruppe	: ARRAY[1..2] OF SH_Light.ST_DALI_RoomSetup := 
	
													[(	byShrtAdr_Prim := 24, 
														byGrpAdr_Prim := 2, 
														eMod_Prim := E_DALIAddressType.Group, 
														byShrtAdr_Sec := 1, 
														byGrpAdr_Sec := 1, 
														eMod_Sec := E_DALIAddressType.Short, 
														//byShrtAdr_Supl := 1,
														//eMod_Supl := E_DALIADDRESSTYPE.Group,
                                                        byGrpAdr_Supl := 1, 
														DALI_LINE_NUM_PRIM := arrDALI_LINE_NUM_LIGHT[1], 
														DALI_LINE_NUM_SEC := 0, //0 = ingen zonestyring/vinduerække
														DALI_LINE_NUM_SUPL := arrDALI_LINE_NUM_PENDANTS[1]),
														
													(	byShrtAdr_Prim := 17, 
														byGrpAdr_Prim := 2, 
														eMod_Prim := E_DALIAddressType.Group, 
														byShrtAdr_Sec := 1, 
														byGrpAdr_Sec := 1, 
														eMod_Sec := E_DALIAddressType.Short, 
														byShrtAdr_Supl := 1, 
														DALI_LINE_NUM_PRIM := arrDALI_LINE_NUM_LIGHT[2], 
														DALI_LINE_NUM_SEC := 0, 
														DALI_LINE_NUM_SUPL := arrDALI_LINE_NUM_PENDANTS[2])];
														
	arrstLiveDataGruppe		: ARRAY [1..2] OF SH_Light.ST_LiveData;
	//stLiveData AT %MB22	: SH_Light.ST_LiveData;
	
	arrRunTuningGruppe: ARRAY[1..2] OF BOOL;
	
	
	//stLiveData AT %MB22	: SH_Light.ST_LiveData;
	bTopButtonZone1			: BOOL;
	bTopButtonZone1_Visu	: BOOL;
	bBottomButtonZone1		: BOOL;
	bBottomButtonZone1_Visu	: BOOL;
	bButtonZone2			: BOOL;
	bNeighborRoomsPir		: BOOL;
	fLuxOn					: REAL;
	fLuxDim					: REAL;
	tPIRDim					: TIME;
	tPIROff					: TIME;
	fOffsetSec				: REAL := 20;
	bOccupiedRoom			: BOOL;;

	bRunTuning				: BOOL;


(*
Lysstyring for rummet er afhængig af to sensorer - adr. 6 og 10 - på forskellige DALI-linjer - 2 og 3 henh.. Derfor oprettes to FB_NIKO_P46xx_1Pcs-instanser.
Regulering og knapfunktion forbliver den samme.
Løsningen kræver lidt ekstra logik i P_Rum_5_353.A_Sensor, hvor sensordata samles i én struktur - stPirSensorData

*)
// Sensor Settings
	arrfbSensorLine				: ARRAY[1..2] OF SH_Light.FB_NIKO_P46xx_1Pcs;
	arrSensorAddrLine			: ARRAY[1..2] OF BYTE := [1,8];
	arrInitializeLine			: ARRAY[1..2] OF BOOL := [TRUE,TRUE];
	arrstDaliSensorSetup		: ARRAY[1..2] OF ST_DALI_NIKOP46SetupData;
	arrInitErrLine				: ARRAY [1..2] OF BOOL;
	arrInitDoneLine				: ARRAY [1..2] OF BOOL;
	arrSensorScalesLine			: ARRAY[1..2] OF ARRAY [1..10] OF SH_Light.ST_DALI_SensorScaleMode :=[	[	(fMeassureMaxSensor := rMeassure_Zone7, fReadMaxSensor := rRead_Zone7),
																											9(())	],
																										[	(fMeassureMaxSensor := rMeassure_Zone7, fReadMaxSensor := rRead_Zone7),
																											9(())	]];
	arrCancelHoldTimerOccupancyLine	: ARRAY[1..2] OF BOOL;
(*	eEventPriorityOccupancy		: E_DALIEventPriority := E_DALIEVENTPRIORITY.Middle;
	nHoldTimerOccupancy			: WORD := 5; // Value in s. 	
	nReportTimerOccupancy		: BYTE := 120; // Value in s, Preset manufacturer value
	nDeadtimeTimerOccupancy		: WORD := 100; // Value in ms, Predefined Value of DALI Standard
	bCancelHoldTimerOccupancy	: BOOL;
	nSensitivityOccupancy		: BYTE:= 3; //setting Sensivity (0..4) 0 (Off), 1 (Min), 2(Low), 3(High) and 4 (Max)

	bEnableLuxEvent				: BOOL;
	eEventPriorityBrightness	: E_DALIEventPriority := E_DALIEVENTPRIORITY.Middle;
	nDeadtimeTimerBrightness	: WORD := 1500; // Value in ms, Predefined Value of DALI Standard
	nHysteresisBrightness		: BYTE := 2; // Value in %
	nHysteresisMinBrightness	: BYTE := 10; // Absolute Value, depending on the manufacturer specific resolution
	nReportTimerBrightness		: BYTE := 120; // Value in s, Preset manufacturer value
*)

	//ModbusComm setup
	
	fbWriteSPLuxLevel			: SH_Light.FB_TwoVal_SelectOne_RTrigChange;
	fbWritePirDelayTIme			: SH_Light.FB_TwoVal_SelectOne_RTrigChange;
	stRoomDataPLC				: SH_Light.ST_RoomDataPLC	:=	(	uiPirOffDelayTime	:= 30,
																	uiSpLuxLevel		:= 500,
																	uiPirDimDelayTime	:= 15,
																	uiSpDimLuxLevel		:= 200
																);
	fbBallastOnHours			: SH_Light.FB_CountOnHours;
	bEnableHourCount			: BOOL := TRUE;
	
	//Non-persistent modbus data
	bPirActive_MB			AT %MX500.0	: BOOL;				//bPirLys i gammel kode
	uiActLuxLevel_MB		AT %MB504	: UINT;				//intHMIAktueltLux i gammel kode
	uiActLightLevelPct_MB	AT %MB508	: UINT;				//intDALI_Gruppe1_Lysniveau i gammel kode
	
	//For Conversion
	uiPirOffMinutes						: UINT;
	udTimeScaling						: UDINT := 60000;
	uiLuxOn								: UINT;
	
	//max values checks
	uiMaxLuxLevel						: UINT := 1023;
	uiMaxPirOffMinutes					: UINT := 180;

	

END_VAR

VAR CONSTANT
	arrSensor_DALI_LINE_NUM	: ARRAY[1..2] OF BYTE := [2,3];// korrekt rækkefølge nødvendig
	arrDALI_LINE_NUM_LIGHT: ARRAY[1..2] OF BYTE := [1,2]; //korrekt rækkefølge nødvendig //rækkefølge og linje 
	arrDALI_LINE_NUM_PENDANTS: ARRAY[1..2] OF BYTE := [0,0]; //korrekt rækkefølge nødvendig. 0 = ingen pendler
END_VAR
VAR PERSISTENT
	stPirSensorData			: SH_Light.ST_DALI_Sensor; //samlet sensordata
	arrstPirSensorDataLine	: ARRAY[1..2] OF SH_Light.ST_DALI_Sensor;
	arrstTuneDataGruppe: ARRAY [1..2] OF SH_Light.ST_TuneData_EX;
		
	uiPirOffDelayTime_MB	AT %MB502	: UINT;				//ntHMI_Pir_SetValue i gammel kode
	uiSPLuxLevel_MB			AT %MB506	: UINT;				//intHMI_Lux_SetValue i gammel kode
	uiBallastOnHours_MB		AT %MB510	: UINT;				//dintHMILysbraendtimer1 i gammel kode
	byOnHoursOverflowCount				: BYTE;   
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[A_Buttons();
A_ModbusComm();
A_LightCtrl();
A_Sensor();
]]></ST>
    </Implementation>
    <Action Name="A_Buttons" Id="{72754a4c-ede1-4152-a378-97696ade0efa}">
      <Implementation>
        <ST><![CDATA[bTopButtonZone1		:= bTopButtonZone1_Visu;
bBottomButtonZone1	:= bBottomButtonZone1_Visu;
]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_LightCtrl" Id="{291db100-832a-41ae-bb6f-0f3315717f7d}">
      <Implementation>
        <ST><![CDATA[bNeighborRoomsPir :=	P_Gang_3_409.stPirSensorData.bPrc OR
									P_Rum_3_463.stPirSensorData.bPrc OR
									P_Gang_3_462A.stPirSensorData.bPrc OR
									P_Rum_2_449.stPirSensorData.bPrc OR
									GVL_AHDataModbus.arrAH_NeighborRoomsPir[7][1] OR
                        			GVL_AHDataModbus.arrAH_NeighborRoomsPir[21][1];
//gruppe 6
arrfbLysGruppe[1]( 
	nZoneID:= 1, 
	bButtonZone1:= bTopButtonZone1,
	bBottomButtonZone1 := bBottomButtonZone1,
	bTopButtonOverride := (GVL_EnOcean.strEnOceanSwitch_AtriumNiveau_PladeB.bT2_ON OR GVL_EnOcean.strEnOceanSwitch_AtriumNiveau_Service.bT2_ON),
	bBottomButtonOverride := (GVL_EnOcean.strEnOceanSwitch_AtriumNiveau_PladeB.bT2_OFF OR GVL_EnOcean.strEnOceanSwitch_AtriumNiveau_Service.bT2_OFF),
	bButtonZone2:= bButtonZone2,
	bNoButtons := TRUE,
	bNeighborRoomsPir	:=	bNeighborRoomsPir,
	fLuxOn:= fLuxOn, 
	fLuxDim:= fLuxDim, 
	tPIRDim:= tPIRDim, 
	tPIROff:= tPIROff, 
	fOffsetSec:= fOffsetSec, 
	bReInit:= , 
	stDaliSetup:= arrstDaliSetupGruppe[1], 
	ipCommunication_Prim:= P_DALI_Background.arrfbKL6821Communication[arrDALI_LINE_NUM_LIGHT[1]], 
	ipCommunication_Sec:= P_DALI_Background.arrfbKL6821Communication[arrDALI_LINE_NUM_LIGHT[1]], //samme som lyslinjen, hvis den ikke eksisterer
	ipCommunication_Supl:= P_DALI_Background.arrfbKL6821Communication[arrDALI_LINE_NUM_LIGHT[1]],//samme som lyslinjen, hvis den ikke eksisterer 
	fMinOutputPowerLevelRoom:= 15, 
	fMaxOutputPowerLevelRoom:= 100, 
	nCycleTimeInMS:= SH_Light.DALI_Param.nPlcTaskCycleTimeInMS*nDimCmdCycleTimeFactor , 
	bRunTuning:= arrRunTuningGruppe[1], 
	bOccupiedRoom=> , 
	bError_Prim=> , 
	nError_Prim=> , 
	stTuneData:=arrstTuneDataGruppe[1] , 
	stPirSensorData:= stPirSensorData, 					//samme sensordata
	stLiveData:= arrstLiveDataGruppe[1]);

//gruppe 15	
arrfbLysGruppe[2]( 
	nZoneID:= 1, 
	bButtonZone1:= bTopButtonZone1,
	bBottomButtonZone1 := bBottomButtonZone1,
	bTopButtonOverride := (GVL_EnOcean.strEnOceanSwitch_AtriumNiveau_PladeB.bT2_ON OR GVL_EnOcean.strEnOceanSwitch_AtriumNiveau_Service.bT2_ON),
	bBottomButtonOverride := (GVL_EnOcean.strEnOceanSwitch_AtriumNiveau_PladeB.bT2_OFF OR GVL_EnOcean.strEnOceanSwitch_AtriumNiveau_Service.bT2_OFF),
	bButtonZone2:= bButtonZone2,
	bNoButtons := TRUE,
	bNeighborRoomsPir	:=	bNeighborRoomsPir,
	fLuxOn:= fLuxOn, 
	fLuxDim:= fLuxDim, 
	tPIRDim:= tPIRDim, 
	tPIROff:= tPIROff, 
	fOffsetSec:= fOffsetSec, 
	bReInit:= , 
	stDaliSetup:= arrstDaliSetupGruppe[2], 
	ipCommunication_Prim:= P_DALI_Background.arrfbKL6821Communication[arrDALI_LINE_NUM_LIGHT[2]], 
	ipCommunication_Sec:= P_DALI_Background.arrfbKL6821Communication[arrDALI_LINE_NUM_LIGHT[2]], //samme som lyslinjen, hvis den ikke eksisterer
	ipCommunication_Supl:= P_DALI_Background.arrfbKL6821Communication[arrDALI_LINE_NUM_LIGHT[2]], //samme som lyslinjen, hvis den ikke eksisterer 
	fMinOutputPowerLevelRoom:= 15, 
	fMaxOutputPowerLevelRoom:= 100, 
	nCycleTimeInMS:= SH_Light.DALI_Param.nPlcTaskCycleTimeInMS*nDimCmdCycleTimeFactor , 
	bRunTuning:= arrRunTuningGruppe[2], 
	bOccupiedRoom=> , 
	bError_Prim=> , 
	nError_Prim=> , 
	stTuneData:=arrstTuneDataGruppe[2] , 
	stPirSensorData:= stPirSensorData, 					//samme sensordata
	stLiveData:= arrstLiveDataGruppe[2]);	]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_ModbusComm" Id="{42821f53-63ab-4d7e-a743-2ceb5b103cc8}">
      <Implementation>
        <ST><![CDATA[//Manage data for modbus communication

//Manage data for read-only in PLC
stRoomDataPLC.bPirActive			:= stPirSensorData.bPrc;
stRoomDataPLC.uiActLuxLevel			:= TO_UINT(TRUNC(stPirSensorData.fBrightness));
stRoomDataPLC.uiActLightLevelPct	:= TO_UINT(TRUNC(arrfbLysGruppe[1].fbBallast.fActlLgtLvl_Prim));
		//stRoomDataPLC.uiActLightLevelPct	:= TO_UINT(TRUNC(fbLys.fbBallast.fActlLgtLvl_Prim)); //if only one group light control
stRoomDataPLC.uiBallastOnHours		:= uiBallastOnHours_MB; //The calculation for BallastOnHours is stored directly to the MB register below


//Assign data for read-only to MB registers
bPirActive_MB			:= stRoomDataPLC.bPirActive;
uiActLuxLevel_MB		:= stRoomDataPLC.uiActLuxLevel;
uiActLightLevelPct_MB	:= stRoomDataPLC.uiActLightLevelPct;

	//calculate BallastOnHours
	fbBallastOnHours(
		bEnableHourCount	:= bEnableHourCount,
		bPauseCount			:= arrfbLysGruppe[1].fbLightCtrl.bOffZone1,
		uiOnHours			:= uiBallastOnHours_MB,			//OnHours is updated here
		byOverflowCount		:= byOnHoursOverflowCount);


//Manage data for read/write for both PLC and MB registers
fbWriteSPLuxLevel(	nMaxValOut	:= uiMaxLuxLevel,
					nValIn1		:= uiSPLuxLevel_MB,		//nValIn1 takes priotity in case of download or restart
					nValIn2		:= stRoomDataPLC.uiSpLuxLevel,
					nValOut		=> uiLuxOn
				);


fbWritePirDelayTIme(	nMaxValOut	:= uiMaxPirOffMinutes,
						nValIn1		:= uiPirOffDelayTime_MB,		//nValIn1 takes priotity in case of download or restart
						nValIn2		:= stRoomDataPLC.uiPirOffDelayTime,
						nValOut		=> uiPirOffMinutes
					);
					

//Convert read/write modbus data to appropriate datatypes in PLC
fLuxOn	:= TO_REAL(uiLuxOn);			
tPIROff	:= TO_TIME(uiPirOffMinutes*udTimeScaling); //Time conversion defaults to ms

fLuxDim	:= TO_REAL(stRoomDataPLC.uiSpDimLuxLevel);			
tPIRDim	:= TO_TIME(stRoomDataPLC.uiPirDimDelayTime*udTimeScaling); //Time conversion defaults to ms
]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_Sensor" Id="{84a174f8-31fa-4d04-a533-c86371883255}">
      <Implementation>
        <ST><![CDATA[
arrfbSensorLine[1].ipCommunication := P_DALI_Background.arrfbKL6821Communication[arrSensor_DALI_LINE_NUM[1]];
arrfbSensorLine[2].ipCommunication := P_DALI_Background.arrfbKL6821Communication[arrSensor_DALI_LINE_NUM[2]];

arrfbSensorLine[1](
	byShrtAdr:= arrSensorAddrLine[1],
	bInitialize:= arrInitializeLine[1], 
	DALI_LINE_NUM:= arrSensor_DALI_LINE_NUM[1], 
 	//bCancelHoldTimerOccupancy:= arrCancelHoldTimerOccupancyLine[1], 
	stSensorSetup := arrstDaliSensorSetup[1],
	bInitErr=> arrInitErrLine[1], 
	bInitDone=> arrInitDoneLine[1],
	stPirSensorData:= arrstPirSensorDataLine[1], 
	arrSensorScales:= arrSensorScalesLine[1]);


arrfbSensorLine[2](
	byShrtAdr:= arrSensorAddrLine[2],
	bInitialize:= arrInitializeLine[2], 
	DALI_LINE_NUM:= arrSensor_DALI_LINE_NUM[2], 
 	//bCancelHoldTimerOccupancy:= arrCancelHoldTimerOccupancyLine[2], 
	stSensorSetup := arrstDaliSensorSetup[2],
	bInitErr=> arrInitErrLine[2], 
	bInitDone=> arrInitDoneLine[2],
	stPirSensorData:= arrstPirSensorDataLine[2], 
	arrSensorScales:= arrSensorScalesLine[2]);


//Input fra sensorer samles
stPirSensorData.fBrightness		:= MIN(arrstPirSensorDataLine[1].fBrightness, arrstPirSensorDataLine[2].fBrightness);
stPirSensorData.bPrc			:= arrstPirSensorDataLine[1].bPrc OR arrstPirSensorDataLine[2].bPrc;
stPirSensorData.bBrightnessRead	:= arrstPirSensorDataLine[1].bBrightnessRead OR arrstPirSensorDataLine[2].bBrightnessRead;

//Output til sensorer fordeles
IF stPirSensorData.bQueryBrightness THEN
	arrstPirSensorDataLine[1].bQueryBrightness := TRUE;
	arrstPirSensorDataLine[2].bQueryBrightness := TRUE;
ELSE
	arrstPirSensorDataLine[1].bQueryBrightness := FALSE;
	arrstPirSensorDataLine[2].bQueryBrightness := FALSE;
END_IF


]]></ST>
      </Implementation>
    </Action>
  </POU>
</TcPlcObject>