<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_Part103Addressing" Id="{64aab4a4-0f66-4e1c-bdd2-783324484020}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Part103Addressing
VAR_INPUT
	ipDALICommunication			:	I_DALICommunication;
END_VAR
VAR_OUTPUT
	bBusy						:	BOOL;
END_VAR
VAR
	{region "Visu"}
	bScanDevices				:	BOOL;
	bStartChangeAddress			:	BOOL;
	bStartRandomAddressing		:	BOOL;
	nStartAddress				:	BYTE;
	bNewInstallation			:	BOOL;
	bOpticalFeedback			:	BOOL;
	bHideWaitSymbol				:	BOOL := TRUE;
	{endregion}
	nStep						:	INT;
	nAddress					:	INT;
	aChangeAddressList			:	ARRAY [0..63] OF ST_DALIChangeAddressList;
	aShortAddress				:	ARRAY [0..63] OF INT;
	aNoShortAddress				:	ARRAY [0..63] OF BOOL;
	nRow						:	INT;
	nHideLine					:	INT; // Variable to find out how many rows are used

	fb103StartQuiescentMode		:	FB_DALI103StartQuiescentMode(0);
	fb103StopQuiescentMode		:	FB_DALI103StopQuiescentMode(0);
	fb103Addressing				:	FB_DALI103Addressing(0);
	fb103QueryRandomAddress		:	FB_DALI103QueryRandomAddress(0);
	fb103ChangeAddresses		:	FB_DALI103ChangeAddresses(0);
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[{region "Detect Commands"}
IF (bStartRandomAddressing AND (nStep = 0)) THEN
	nStep := 5;
	bStartRandomAddressing := FALSE;
	bHideWaitSymbol := FALSE;
END_IF

IF (bScanDevices AND (nStep = 0)) THEN
	nStep := 20;
	nAddress :=0;
	bScanDevices := FALSE;
	bHideWaitSymbol := FALSE;
END_IF

IF (bStartChangeAddress AND (nStep = 0)) THEN
	nStep := 60;
	bStartChangeAddress := FALSE;
	bHideWaitSymbol := FALSE;
END_IF
{endregion}
{region "Manage Dialog Selection}
IF (nStep = 0) THEN
	bBusy := FALSE;
ELSE
	bBusy := TRUE;
END_IF
{endregion}	 
{region "Execute Commands"}
CASE nStep OF
0:
{region "Init"}
	bScanDevices := FALSE;
	bStartChangeAddress := FALSE;
	bStartRandomAddressing := FALSE;
	bHideWaitSymbol := TRUE;

	fb103StartQuiescentMode.ipDALICommunication := ipDALICommunication;
	fb103StopQuiescentMode.ipDALICommunication := ipDALICommunication;
	fb103Addressing.ipDALICommunication := ipDALICommunication;
	fb103QueryRandomAddress.ipDALICommunication := ipDALICommunication;
	fb103ChangeAddresses.ipDALICommunication := ipDALICommunication;
{endregion}
5:
{region "Start Qiescent Mode"}
	fb103StartQuiescentMode(bStart := TRUE,
							eAddressType := Tc3_DALI.E_DALIAddressType.Broadcast,
							eCommandPriority := Tc3_DALI.E_DALICommandPriority.Middle);
	IF (NOT fb103StartQuiescentMode.bBusy) THEN
		fb103StartQuiescentMode(bStart:= FALSE);
		nStep := 10;
	END_IF
{endregion}
10:
{region "RandomAddressing"}
	IF bNewInstallation THEN
		fb103Addressing.nOptions := Tc3_DALI.GVL.cCompleteNewInstallation;
	END_IF

	IF bOpticalFeedback THEN
		fb103Addressing.nOptions := Tc3_DALI.GVL.cOpticalFeedback;
	END_IF

	IF bNewInstallation AND bOpticalFeedback THEN
		fb103Addressing.nOptions := Tc3_DALI.GVL.cCompleteNewInstallation OR Tc3_DALI.GVL.cOpticalFeedback;
	END_IF
	fb103Addressing(bStart := TRUE,
					nStartWithShortAddress := nStartAddress);
	IF (NOT fb103Addressing.bBusy) THEN
		fb103Addressing(bStart := FALSE);
		nStep := 15;
	END_IF
{endregion}
15:
{region "Stop Qiescent Mode"}
	fb103StopQuiescentMode(	bStart := TRUE,
							eAddressType := Tc3_DALI.E_DALIAddressType.Broadcast,
							eCommandPriority := Tc3_DALI.E_DALICommandPriority.Middle);
	IF (NOT fb103StopQuiescentMode.bBusy) THEN
		fb103StopQuiescentMode(	bStart:= FALSE);
		nStep := 0;
	END_IF
{endregion}
{region "Read Existing Addresses"}
20:
{region "Start Qiescent Mode"}
	fb103StartQuiescentMode(bStart := TRUE,
							eAddressType := Tc3_DALI.E_DALIAddressType.Broadcast,
							eCommandPriority := Tc3_DALI.E_DALICommandPriority.Middle);
	IF (NOT fb103StartQuiescentMode.bBusy) THEN
		fb103StartQuiescentMode(bStart:= FALSE);
		nStep := 30;
	END_IF
{endregion}
30:
	// Query of the new random addresses to find out which short addresses are existing.
	fb103QueryRandomAddress (	bStart := TRUE,
								nAddress := TO_BYTE(nAddress),
								eAddressType := Tc3_DALI.E_DALIAddressType.Short,
								nRandomAddress => aChangeAddressList[nAddress].nRandomAddress);
	IF (NOT fb103QueryRandomAddress.bBusy) THEN
		fb103QueryRandomAddress(bStart := FALSE);
		nAddress := nAddress + 1;
		IF (nAddress > 63) THEN
			nStep := 40;
		END_IF
	END_IF
40:
	// Write the existing short addresses into the table 
	nRow := 0;
	FOR nAddress := 0 TO 63 DO
		IF (aChangeAddressList[nAddress].nRandomAddress > 0) THEN
			aChangeAddressList[nRow].nOldAddress := TO_BYTE(nAddress);
			nRow := nRow + 1;
		END_IF
	END_FOR
	nStep := 50;
50:
	// Hide unused rows in the table
	nHideLine := 0;
	FOR nAddress := 0 TO 63 DO 
		IF (aChangeAddressList[nAddress].nRandomAddress <> 0) THEN
			aShortAddress[nHideLine] := nAddress;
			nHideLine := nHideLine + 1;
		END_IF
	END_FOR
	FOR nAddress := nHideLine TO 63 DO 
		aNoShortAddress[nAddress] := TRUE;
	END_FOR
	FOR nAddress := 0 TO (nHideLine - 1) DO
		aNoShortAddress[nAddress] := FALSE;
	END_FOR
	aChangeAddressList[nHideLine].nOldAddress := 255;
	FOR nAddress := 0 TO nHideLine DO
		aChangeAddressList[nAddress].nNewAddress := aChangeAddressList[nAddress].nOldAddress;
	END_FOR
	nStep := 55;
{endregion}
55:
{region "Stop Qiescent Mode"}
	fb103StopQuiescentMode(	bStart := TRUE,
							eAddressType := Tc3_DALI.E_DALIAddressType.Broadcast,
							eCommandPriority := Tc3_DALI.E_DALICommandPriority.Middle);
	IF (NOT fb103StopQuiescentMode.bBusy) THEN
		fb103StopQuiescentMode(	bStart:= FALSE);
		nStep := 0;
	END_IF
{endregion}
60:
{region "Write Changed Addresses}
	fb103ChangeAddresses(	bStart := TRUE,
							aChangeAddressList := aChangeAddressList);
	IF (NOT fb103ChangeAddresses.bBusy) THEN
		fb103ChangeAddresses(	bStart := FALSE,
								aChangeAddressList := aChangeAddressList);
		nStep := 70;
	END_IF
{endregion}
70:
{region "Write New Address To Old Address}
	FOR nAddress := 0 TO 63 DO
		aChangeAddressList[nAddress].nOldAddress := aChangeAddressList[nAddress].nNewAddress;
	END_FOR
	nStep := 0;
{endregion}
END_CASE]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>