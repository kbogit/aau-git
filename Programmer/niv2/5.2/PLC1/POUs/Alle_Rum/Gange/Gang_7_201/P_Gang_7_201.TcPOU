<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="P_Gang_7_201" Id="{1f3b340f-91dd-419b-8ec4-e08624d83473}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM P_Gang_7_201
VAR

	fbLys		: FB_Light_Type_B;
	
	stDaliSetup	: SH_Light.ST_DALI_RoomSetup := (		byShrtAdr_Prim := 1, 
														byGrpAdr_Prim := 5, 
														eMod_Prim := E_DALIAddressType.Group, 
														byShrtAdr_Sec := 1, 
														byGrpAdr_Sec := 1, 
														eMod_Sec := E_DALIAddressType.Short, 
														byShrtAdr_Supl := 40, 
														byGrpAdr_Supl := 1,
														eMod_Supl := E_DALIAddressType.Short,
														DALI_LINE_NUM_PRIM := DALI_LINE_NUM_LIGHT, 
														DALI_LINE_NUM_SEC := 0, 
														DALI_LINE_NUM_SUPL := DALI_LINE_NUM_PENDANTS);
														
	stLiveData				: SH_Light.ST_LiveData;
	bTopButtonZone1			: BOOL;
	bTopButtonZone1_Visu	: BOOL;
	bBottomButtonZone1		: BOOL;
	bBottomButtonZone1_Visu	: BOOL;
	bButtonZone2			: BOOL;
	bNeighborRoomsPir		: BOOL;
	fLuxOn					: REAL;
	fLuxDim					: REAL;
	tPIRDim					: TIME;
	tPIROff					: TIME;
	fOffsetSec				: REAL := 20;
	bOccupiedRoom			: BOOL;

	bRunTuning				: BOOL;
	

// Sensor Settings

	fbSensor						: SH_Light.FB_NIKO_P46xx_3Pcs;
	arrSensorAddr				: ARRAY[1..3] OF BYTE :=[15,16,17];  
	bInitialize						: BOOL := TRUE;
	stDaliSensorSetup			: ST_DALI_NIKOP46SetupData;
	arrInitErr						: ARRAY [1..3] OF BOOL;
	arrInitDone					: ARRAY [1..3] OF BOOL;
	arrSensorScales				: ARRAY [1..10] OF SH_Light.ST_DALI_SensorScaleMode := [ 	                                                (fMeassureMaxSensor := rMeassure_Zone7, fReadMaxSensor := rRead_Zone7),
																																			(fMeassureMaxSensor := rMeassure_Zone7, fReadMaxSensor := rRead_Zone7),
																																			(fMeassureMaxSensor := rMeassure_Zone7, fReadMaxSensor := rRead_Zone7),
																																			7(())];
																					
	bCancelHoldTimerOccupancy	: BOOL;
	
(*	eEventPriorityOccupancy		: E_DALIEventPriority := E_DALIEVENTPRIORITY.Middle;
	nHoldTimerOccupancy			: WORD := 5; // Value in s. 	
	nReportTimerOccupancy		: BYTE := 120; // Value in s, Preset manufacturer value
	nDeadtimeTimerOccupancy		: WORD := 100; // Value in ms, Predefined Value of DALI Standard
	bCancelHoldTimerOccupancy	: BOOL;
	nSensitivityOccupancy		: BYTE:= 3; //setting Sensivity (0..4) 0 (Off), 1 (Min), 2(Low), 3(High) and 4 (Max)

	bEnableLuxEvent				: BOOL;
	eEventPriorityBrightness	: E_DALIEventPriority := E_DALIEVENTPRIORITY.Middle;
	nDeadtimeTimerBrightness	: WORD := 1500; // Value in ms, Predefined Value of DALI Standard
	nHysteresisBrightness		: BYTE := 2; // Value in %
	nHysteresisMinBrightness	: BYTE := 10; // Absolute Value, depending on the manufacturer specific resolution
	nReportTimerBrightness		: BYTE := 120; // Value in s, Preset manufacturer value
*)

	//ModbusComm setup
	
	fbWriteSPLuxLevel				: SH_Light.FB_TwoVal_SelectOne_RTrigChange;
	fbWritePirDelayTime			: SH_Light.FB_TwoVal_SelectOne_RTrigChange;
	stRoomDataPLC					: SH_Light.ST_RoomDataPLC	:=	(	uiPirOffDelayTime	:= 30,
																										uiSpLuxLevel			:= 500,
																										uiPirDimDelayTime	:= 15,
																										uiSpDimLuxLevel		:= 200);
																
	fbBallastOnHours					: SH_Light.FB_CountOnHours;
	bEnableHourCount				: BOOL := TRUE;
	
	//Non-persistent modbus data
	bPirActive_MB					AT %MX504.0	: BOOL;				//bPirLys i gammel kode
	uiActLuxLevel_MB			AT %MB314	: UINT;				//intHMIAktueltLux i gammel kode
	uiActLightLevelPct_MB	AT %MB318	: UINT;				//intDALI_Gruppe1_Lysniveau i gammel kode
	
	//For Conversion
	uiPirOffMinutes						: UINT;
	udTimeScaling						: UDINT := 60000;
	uiLuxOn								: UINT;
	
	//max values checks
	uiMaxLuxLevel						: UINT := 1023;
	uiMaxPirOffMinutes					: UINT := 180;

END_VAR

VAR CONSTANT
	Sensor_DALI_LINE_NUM	: BYTE := 3;
	DALI_LINE_NUM_LIGHT     : BYTE  := 2;
	DALI_LINE_NUM_PENDANTS	: BYTE := 2;
END_VAR
VAR PERSISTENT
    stPirSensorData: SH_Light.ST_DALI_Sensor;
	stTuneData: SH_Light.ST_TuneData_EX;
	
	uiPirOffDelayTime_MB	AT %MB312	: UINT;				//ntHMI_Pir_SetValue i gammel kode
	uiSPLuxLevel_MB			AT %MB316	: UINT;				//intHMI_Lux_SetValue i gammel kode
	uiBallastOnHours_MB		AT %MB320	: UINT;				//dintHMILysbraendtimer1 i gammel kode
	byOnHoursOverflowCount				: BYTE;
END_VAR


]]></Declaration>
    <Implementation>
      <ST><![CDATA[A_Buttons();
A_LightCtrl();
A_ModbusComm();
A_Sensor();
]]></ST>
    </Implementation>
    <Action Name="A_Buttons" Id="{ca6afc64-621a-4a37-a6d8-94fb7618414a}">
      <Implementation>
        <ST><![CDATA[bTopButtonZone1		:= bTopButtonZone1_Visu;
bBottomButtonZone1	:= bBottomButtonZone1_Visu;]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_LightCtrl" Id="{9d96cb6b-174b-4451-99c3-8c736268201f}">
      <Implementation>
        <ST><![CDATA[bNeighborRoomsPir	:=  GVL_AHDataModbus.arrAH_NeighborRoomsPir  [4] [0] OR //2-1 
GVL_AHDataModbus.arrAH_NeighborRoomsPir  [4] [1] OR  //2-1 
GVL_AHDataModbus.arrAH_NeighborRoomsPir  [4] [2] OR //2-1 
GVL_AHDataModbus.arrAH_NeighborRoomsPir  [18] [0] OR//5-1
GVL_AHDataModbus.arrAH_NeighborRoomsPir  [18] [1]OR //5-1
GVL_AHDataModbus.arrAH_NeighborRoomsPir  [5] [0] OR //2-2
GVL_AHDataModbus.arrAH_NeighborRoomsPir  [5] [1] OR //2-2
GVL_AHDataModbus.arrAH_NeighborRoomsPir  [5] [2] OR //2-2
GVL_AHDataModbus.arrAH_NeighborRoomsPir  [5] [3] OR //2-2
GVL_AHDataModbus.arrAH_NeighborRoomsPir  [5] [4] OR //2-2
GVL_AHDataModbus.arrAH_NeighborRoomsPir  [5] [5] OR //2-2
GVL_AHDataModbus.arrAH_NeighborRoomsPir  [9] [0] OR //3-2 
GVL_AHDataModbus.arrAH_NeighborRoomsPir  [9] [1] OR //3-2 
GVL_AHDataModbus.arrAH_NeighborRoomsPir  [9] [2]  OR //3-2 
GVL_AHDataModbus.arrAH_NeighborRoomsPir  [14] [0] OR //4-2 
GVL_AHDataModbus.arrAH_NeighborRoomsPir [14] [1]; //4-2 
//gruppe 1 L1
fbLys( 
	nZoneID:= 1, 
	bButtonZone1:= bTopButtonZone1,
	bBottomButtonZone1 := bBottomButtonZone1,
	bTopButtonOverride := (GVL_EnOcean.strEnOceanSwitch_AtriumNiveau_PladeB.bT2_ON OR GVL_EnOcean.strEnOceanSwitch_AtriumNiveau_Service.bT2_ON),
	bBottomButtonOverride := (GVL_EnOcean.strEnOceanSwitch_AtriumNiveau_PladeB.bT2_OFF OR GVL_EnOcean.strEnOceanSwitch_AtriumNiveau_Service.bT2_OFF),
	bButtonZone2:= bButtonZone2,
	bNoButtons := TRUE,
	bNeighborRoomsPir	:=	bNeighborRoomsPir,
	fLuxOn:= fLuxOn, 
	fLuxDim:= fLuxDim, 
	tPIRDim:= tPIRDim, 
	tPIROff:= tPIROff, 
	fOffsetSec:= fOffsetSec, 
	bReInit:= , 
	stDaliSetup:= stDaliSetup, 
	ipCommunication_Prim:= P_DALI_Background.arrfbKL6821Communication[DALI_LINE_NUM_LIGHT], 
	ipCommunication_Sec:= P_DALI_Background.arrfbKL6821Communication[DALI_LINE_NUM_LIGHT], //samme som lyslinjen, hvis den ikke eksisterer
	ipCommunication_Supl:= P_DALI_Background.arrfbKL6821Communication[DALI_LINE_NUM_LIGHT],//samme som lyslinjen, hvis den ikke eksisterer 
	fMinOutputPowerLevelRoom:= 15, 
	fMaxOutputPowerLevelRoom:= 100, 
	nCycleTimeInMS:= SH_Light.DALI_Param.nPlcTaskCycleTimeInMS*nDimCmdCycleTimeFactor , 
	bRunTuning:= bRunTuning, 
	bOccupiedRoom=> , 
	bError_Prim=> , 
	nError_Prim=> , 
	stTuneData:=stTuneData , 
	stPirSensorData:= stPirSensorData, 					
	stLiveData:= stLiveData);
]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_ModbusComm" Id="{5455f224-01b8-47cb-ac85-8f40cdc2da38}">
      <Implementation>
        <ST><![CDATA[//Manage data for modbus communication

//Manage data for read-only in PLC
stRoomDataPLC.bPirActive			:= stPirSensorData.bPrc;
stRoomDataPLC.uiActLuxLevel			:= TO_UINT(TRUNC(stPirSensorData.fBrightness));
stRoomDataPLC.uiActLightLevelPct	:= TO_UINT(TRUNC(fbLys.fbBallast.fActlLgtLvl_Prim));
		//stRoomDataPLC.uiActLightLevelPct	:= TO_UINT(TRUNC(fbLys.fbBallast.fActlLgtLvl_Prim)); //if only one group light control
stRoomDataPLC.uiBallastOnHours		:= uiBallastOnHours_MB; //The calculation for BallastOnHours is stored directly to the MB register below


//Assign data for read-only to MB registers
bPirActive_MB			:= stRoomDataPLC.bPirActive;
uiActLuxLevel_MB		:= stRoomDataPLC.uiActLuxLevel;
uiActLightLevelPct_MB	:= stRoomDataPLC.uiActLightLevelPct;

	//calculate BallastOnHours
	fbBallastOnHours(
		bEnableHourCount	:= bEnableHourCount,
		bPauseCount			:= fbLys.fbLightCtrl.bOffZone1,
		uiOnHours			:= uiBallastOnHours_MB,			//OnHours is updated here
		byOverflowCount		:= byOnHoursOverflowCount);


//Manage data for read/write for both PLC and MB registers
fbWriteSPLuxLevel(	nMaxValOut	:= uiMaxLuxLevel,
					nValIn1		:= uiSPLuxLevel_MB,		//nValIn1 takes priotity in case of download or restart
					nValIn2		:= stRoomDataPLC.uiSpLuxLevel,
					nValOut		=> uiLuxOn
				);


fbWritePirDelayTime(	nMaxValOut	:= uiMaxPirOffMinutes,
						nValIn1		:= uiPirOffDelayTime_MB,		//nValIn1 takes priority in case of download or restart
						nValIn2		:= stRoomDataPLC.uiPirOffDelayTime,
						nValOut		=> uiPirOffMinutes
					);
					

//Convert read/write modbus data to appropriate datatypes in PLC
fLuxOn	:= TO_REAL(uiLuxOn);			
tPIROff	:= TO_TIME(uiPirOffMinutes*udTimeScaling); //Time conversion defaults to ms

fLuxDim	:= TO_REAL(stRoomDataPLC.uiSpDimLuxLevel);			
tPIRDim	:= TO_TIME(stRoomDataPLC.uiPirDimDelayTime*udTimeScaling); //Time conversion defaults to ms
]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_Sensor" Id="{9139fc03-3182-4607-8610-975c3d2d3296}">
      <Implementation>
        <ST><![CDATA[
fbSensor.ipCommunication := P_DALI_Background.arrfbKL6821Communication[Sensor_DALI_LINE_NUM];

(*//only 1 sensor
fbSensor(
	byShrtAdr:= bySensorAddr,
	bInitialize:= bInitialize, 
	DALI_LINE_NUM:= Sensor_DALI_LINE_NUM, 
 	//bCancelHoldTimerOccupancy:= bCancelHoldTimerOccupancy, 
	stSensorSetup := stDaliSensorSetup,
	bInitErr=> bInitErr, 
	bInitDone=> bInitDone,
	stPirSensorData:= stPirSensorData, 
	arrSensorScales:= arrSensorScales);
*)

fbSensor(
	arrShrtAdr:= arrSensorAddr,
	bInitialize:= bInitialize, 
	DALI_LINE_NUM:= Sensor_DALI_LINE_NUM, 
 	//bCancelHoldTimerOccupancy:= bCancelHoldTimerOccupancy, 
	stSensorSetup := stDaliSensorSetup,
	arrInitErr=> arrInitErr, 
	arrInitDone=> arrInitDone,
	stPirSensorData:= stPirSensorData, 
	arrSensorScales:= arrSensorScales);
	]]></ST>
      </Implementation>
    </Action>
  </POU>
</TcPlcObject>