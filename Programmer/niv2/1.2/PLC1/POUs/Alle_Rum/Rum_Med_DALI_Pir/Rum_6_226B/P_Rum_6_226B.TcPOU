<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="P_Rum_6_226B" Id="{89ab7b33-d81c-4b08-9f30-b5f04b7999d9}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM P_Rum_6_226B
VAR
	fbLysGruppe			:  FB_Light_Type_A;
	stDaliSetupGruppe	: SH_Light.ST_DALI_RoomSetup :=
													(	byShrtAdr_Prim	:= 5, 
														byGrpAdr_Prim		:= 1, 
														eMod_Prim			:= E_DALIAddressType.Group, 
														//byShrtAdr_Sec		:= 1, 
														//byGrpAdr_Sec		:= 1, 
														//eMod_Sec				:= E_DALIAddressType.Short, 
														byShrtAdr_Supl		:= 40,
														//byGrpAdr_Supl		:= 1,
														eMod_Supl			:=  E_DALIAddressType.Short, 
														DALI_LINE_NUM_PRIM := DALI_LINE_NUM_LIGHT, 
														DALI_LINE_NUM_SEC := 0, //0 = ingen zonestyring/vinduerække
														DALI_LINE_NUM_SUPL := DALI_LINE_NUM_PENDANTS);
												
														
	stLiveDataGruppe			: SH_Light.ST_LiveData;
	RunTuningGruppe			: BOOL;
	
	bTopButtonZone1				: BOOL;
	bTopButtonZone1_Visu		: BOOL;
	bBottomButtonZone1			: BOOL;
	bBottomButtonZone1_Visu	: BOOL;
	bButtonZone2					: BOOL;
	bNeighborRoomsPir			: BOOL;
	fLuxOn								: REAL;
	fLuxDim							: REAL;
	tPIRDim							: TIME;
	tPIROff							: TIME;
	fOffsetSec						: REAL := 20;
	bOccupiedRoom				: BOOL;

	bRunTuning						: BOOL;


// Sensor Settings
	fbSensor						: SH_Light.FB_NIKO_P46xx_1Pcs;
	//fbSensor					: SH_Light.FB_NIKO_P46xx_3Pcs;
	bySensorAddr				: BYTE := 4;
	//arrSensorAddr			: ARRAY[1..3] OF BYTE := [];
	bInitialize						: BOOL := TRUE;
	stDaliSensorSetup			: ST_DALI_NIKOP46SetupData := (
																nSensitivityPIRSegmentA:=nSensitivityOccupancy,
																nSensitivityPIRSegmentB:=nSensitivityOccupancy,
																nSensitivityPIRSegmentC:=nSensitivityOccupancy);
	bInitErr							: BOOL;
	bInitDone						: BOOL;
	//arrInitErr					: ARRAY [1..3] OF BOOL;
	//arrInitDone				: ARRAY [1..3] OF BOOL;
	arrSensorScales				: ARRAY [1..10] OF SH_Light.ST_DALI_SensorScaleMode :=
																							[	(fMeassureMaxSensor := rMeassure_Zone10, fReadMaxSensor := rRead_Zone10),																						
																								9(())];
																								
	bCancelHoldTimerOccupancy	: BOOL;
(*	eEventPriorityOccupancy		: E_DALIEventPriority := E_DALIEVENTPRIORITY.Middle;
	nHoldTimerOccupancy			: WORD := 5; // Value in s. 	
	nReportTimerOccupancy		: BYTE := 120; // Value in s, Preset manufacturer value
	nDeadtimeTimerOccupancy		: WORD := 100; // Value in ms, Predefined Value of DALI Standard
	bCancelHoldTimerOccupancy	: BOOL; *)
	

(*	bEnableLuxEvent				: BOOL;
	eEventPriorityBrightness	: E_DALIEventPriority := E_DALIEVENTPRIORITY.Middle;
	nDeadtimeTimerBrightness	: WORD := 1500; // Value in ms, Predefined Value of DALI Standard
	nHysteresisBrightness		: BYTE := 2; // Value in %
	nHysteresisMinBrightness	: BYTE := 10; // Absolute Value, depending on the manufacturer specific resolution
	nReportTimerBrightness		: BYTE := 120; // Value in s, Preset manufacturer value
*)

	

//ModbusComm setup
	
	fbWriteSPLuxLevel			: SH_Light.FB_TwoVal_SelectOne_RTrigChange;
	fbWritePirDelayTIme		: SH_Light.FB_TwoVal_SelectOne_RTrigChange;
	stRoomDataPLC				: SH_Light.ST_RoomDataPLC	:=	(
																	uiPirOffDelayTime	:= 30,
																	uiSpLuxLevel			:= 500,
																	uiPirDimDelayTime	:= 15,
																	uiSpDimLuxLevel		:= 200);

	fbBallastOnHours			: SH_Light.FB_CountOnHours;
	bEnableHourCount		: BOOL := TRUE;
	
	//Non-persistent modbus data
	bPirActive_MB					AT%MX214.0	: BOOL;				//bPirLys i gammel kode
	uiActLuxLevel_MB			AT%MB362		: UINT;				//intHMIAktueltLux i gammel kode
	uiActLightLevelPct_MB	AT%MB218		: UINT;				//intDALI_Gruppe1_Lysniveau i gammel kode
	
	//For Conversion
	uiPirOffMinutes						: UINT;
	udTimeScaling						: UDINT := 60000;
	uiLuxOn								: UINT;
	
	//max values checks
	uiMaxLuxLevel						: UINT := 1023;
	uiMaxPirOffMinutes				: UINT := 180;


END_VAR

VAR CONSTANT
	Sensor_DALI_LINE_NUM				: BYTE := 3;
	DALI_LINE_NUM_LIGHT				: BYTE := 1; //korrekt rækkefølge nødvendig
	DALI_LINE_NUM_PENDANTS	: BYTE := 1; //korrekt rækkefølge nødvendig. 0 = ingen pendler
	nSensitivityOccupancy						: BYTE:= 4; //setting Sensivity (0..4) 0 (Off), 1 (Min), 2(Low), 3(High) and 4 (Max)
END_VAR

VAR PERSISTENT
	stPirSensorData: SH_Light.ST_DALI_Sensor;
	stTuneDataGruppe: SH_Light.ST_TuneData_EX;
	
	uiPirOffDelayTime_MB		AT%MB216	    : UINT;				//intHMI_Pir_SetValue i gammel kode
	uiSPLuxLevel_MB			AT%MB364	    : UINT;				//intHMI_Lux_SetValue i gammel kode
	uiBallastOnHours_MB		AT%MB220		: UINT;				//dintHMILysbraendtimer1 i gammel kode
   	byOnHoursOverflowCount							: BYTE;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[A_Buttons();
A_LightCtrl();
A_Sensor();
A_modbuscomm();
]]></ST>
    </Implementation>
    <Action Name="A_Buttons" Id="{0ba2ba7d-110b-489a-8568-defc8ba2995d}">
      <Implementation>
        <ST><![CDATA[bTopButtonZone1		:= GVL_EnOcean.strEnOceanSwitch_Rum_6_226B_Indgang.bT1_OFF OR bTopButtonZone1_Visu;
bBottomButtonZone1	:= GVL_EnOcean.strEnOceanSwitch_Rum_6_226B_Indgang.bT1_ON OR bBottomButtonZone1_Visu;

bButtonZone2 := 	GVL_EnOcean.strEnOceanSwitch_Rum_6_226B_Pendler.bT2_ON OR GVL_EnOcean.strEnOceanSwitch_Rum_6_226B_Pendler.bT2_OFF;]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_LightCtrl" Id="{a53c699e-ed32-4e2b-8991-9dcdddbadf3a}">
      <Implementation>
        <ST><![CDATA[
fbLysGruppe( 
	nZoneID:= 1, 
	bButtonZone1:= bTopButtonZone1,
	bBottomButtonZone1 := bBottomButtonZone1, 
	bButtonZone2:= bButtonZone2,
	fLuxOn:= fLuxOn, 
	fLuxDim:= fLuxDim, 
	tPIRDim:= tPIRDim, 
	tPIROff:= tPIROff, 
	fOffsetSec:= fOffsetSec, 
	bReInit:= , 
	stDaliSetup:= stDaliSetupGruppe, 
	ipCommunication_Prim:= P_DALI_Background.arrfbKL6821Communication[DALI_LINE_NUM_LIGHT], 
	//ipCommunication_Sec:= P_DALI_Background.arrfbKL6821Communication[DALI_LINE_NUM_LIGHT],
	ipCommunication_Supl:= P_DALI_Background.arrfbKL6821Communication[DALI_LINE_NUM_PENDANTS],
	fMinOutputPowerLevelRoom:= 15, 
	fMaxOutputPowerLevelRoom:= 100, 
	nCycleTimeInMS:= SH_Light.DALI_Param.nPlcTaskCycleTimeInMS*SH_Light.DALI_Param.nDimCmdCycleTimeFactor, 
	bRunTuning:= RunTuningGruppe, 
	bOccupiedRoom=> , 
	bError_Prim=> , 
	nError_Prim=> , 
	stTuneData:=stTuneDataGruppe, 
	stPirSensorData:= stPirSensorData,
	stLiveData:= stLiveDataGruppe);

]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_ModbusComm" Id="{35e91fcb-496d-4794-899c-f58f5aaa6379}">
      <Implementation>
        <ST><![CDATA[//Manage data for modbus communication

//Manage data for read-only in PLC
stRoomDataPLC.bPirActive			:= stPirSensorData.bPrc;
stRoomDataPLC.uiActLuxLevel			:= TO_UINT(TRUNC(stPirSensorData.fBrightness));
stRoomDataPLC.uiActLightLevelPct	:= TO_UINT(TRUNC(fbLysGruppe.fbBallast.fActlLgtLvl_Prim));
		//stRoomDataPLC.uiActLightLevelPct	:= TO_UINT(TRUNC(fbLys.fbBallast.fActlLgtLvl_Prim)); //if only one group light control
stRoomDataPLC.uiBallastOnHours		:= uiBallastOnHours_MB; //The calculation for BallastOnHours is stored directly to the MB register below


//Assign data for read-only to MB registers
bPirActive_MB			:= stRoomDataPLC.bPirActive;
uiActLuxLevel_MB		:= stRoomDataPLC.uiActLuxLevel;
uiActLightLevelPct_MB	:= stRoomDataPLC.uiActLightLevelPct;

	//calculate BallastOnHours
	fbBallastOnHours(
		bEnableHourCount	:= bEnableHourCount,
		bPauseCount			:= fbLysGruppe.fbLightCtrl.bOffZone1,
		uiOnHours			:= uiBallastOnHours_MB,			//OnHours is updated here
		byOverflowCount		:= byOnHoursOverflowCount);


//Manage data for read/write for both PLC and MB registers
fbWriteSPLuxLevel(	nMaxValOut	:= uiMaxLuxLevel,
					nValIn1		:= uiSPLuxLevel_MB,		//nValIn1 takes priotity in case of download or restart
					nValIn2		:= stRoomDataPLC.uiSpLuxLevel,
					nValOut		=> uiLuxOn
				);


fbWritePirDelayTIme(	nMaxValOut	:= uiMaxPirOffMinutes,
						nValIn1		:= uiPirOffDelayTime_MB,		//nValIn1 takes priotity in case of download or restart
						nValIn2		:= stRoomDataPLC.uiPirOffDelayTime,
						nValOut		=> uiPirOffMinutes
					);
					

//Convert read/write modbus data to appropriate datatypes in PLC
fLuxOn	:= TO_REAL(uiLuxOn);			
tPIROff	:= TO_TIME(uiPirOffMinutes*udTimeScaling); //Time conversion defaults to ms

fLuxDim	:= TO_REAL(stRoomDataPLC.uiSpDimLuxLevel);			
tPIRDim	:= TO_TIME(stRoomDataPLC.uiPirDimDelayTime*udTimeScaling); //Time conversion defaults to ms
]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_Sensor" Id="{331964d1-e30f-4ca5-9268-f0fdbf8cec50}">
      <Implementation>
        <ST><![CDATA[
fbSensor.ipCommunication := P_DALI_Background.arrfbKL6821Communication[Sensor_DALI_LINE_NUM];

//only 1 sensor
fbSensor(
	byShrtAdr:= bySensorAddr,
	bInitialize:= bInitialize, 
	DALI_LINE_NUM:= Sensor_DALI_LINE_NUM, 
 	//bCancelHoldTimerOccupancy:= bCancelHoldTimerOccupancy, 
	stSensorSetup := stDaliSensorSetup,
	bInitErr=> bInitErr, 
	bInitDone=> bInitDone,
	stPirSensorData:= stPirSensorData, 
	arrSensorScales:= arrSensorScales);
	
(*//
//several sensors	
fbSensor(
	arrShrtAdr:= arrSensorAddr,
	bInitialize:= bInitialize, 
	DALI_LINE_NUM:= Sensor_DALI_LINE_NUM, 
 	//bCancelHoldTimerOccupancy:= bCancelHoldTimerOccupancy, 
	stSensorSetup := stDaliSensorSetup,
	arrInitErr=> arrInitErr, 
	arrInitDone=> arrInitDone,
	stPirSensorData:= stPirSensorData, 
	arrSensorScales:= arrSensorScales);*)
	]]></ST>
      </Implementation>
    </Action>
  </POU>
</TcPlcObject>