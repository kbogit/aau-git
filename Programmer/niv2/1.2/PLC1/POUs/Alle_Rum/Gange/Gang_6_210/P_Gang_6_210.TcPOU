<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="P_Gang_6_210" Id="{852468e4-6098-4171-a0ce-aa4ab4077870}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM P_Gang_6_210
(*
Gangen består af to lysgrupper - L2G1 og L1G10 - på to forskellige linjer
Begge grupper afhænger af samme PIR-input : pir-adr. 1, 2, 3 og 4 på DALI-linje 2.
Derfor oprettes to adskilte reguleringer med samme PV. Dvs., at knapfunktion og pirfunktion forbliver den samme.
*)
VAR
	arrfbLysGruppe			: ARRAY [1..2] OF FB_Light_Type_B;
	arrstDaliSetupGruppe	: ARRAY[1..2] OF SH_Light.ST_DALI_RoomSetup := 
	
													[(	byShrtAdr_Prim	:= 1, 
														byGrpAdr_Prim		:= 1, 
														eMod_Prim			:= E_DALIAddressType.Group, 
														//byShrtAdr_Sec		:= 1, 
														//byGrpAdr_Sec		:= 1, 
														//eMod_Sec			:= E_DALIAddressType.Short, 
														byShrtAdr_Supl		:= 39,
														//byGrpAdr_Supl := 1,
														eMod_Supl			:= E_DALIAddressType.Short,
														DALI_LINE_NUM_PRIM	:= arrDALI_LINE_NUM_LIGHT[1], 
														DALI_LINE_NUM_SEC		:= 0, //0 = ingen zonestyring/vinduerække
														DALI_LINE_NUM_SUPL	:= arrDALI_LINE_NUM_PENDANTS[1]),
														
													(	byShrtAdr_Prim	:= 36, 
														byGrpAdr_Prim		:= 10, 
														eMod_Prim			:= E_DALIAddressType.Group, 
														//byShrtAdr_Sec		:= 1, 
														//byGrpAdr_Sec		:= 1, 
														//eMod_Sec			:= E_DALIAddressType.Short, 
														//byShrtAdr_Supl		:= 1,
														//byGrpAdr_Supl := 1,
														//eMod_Supl			:= E_DALIAddressType.Short, 
														DALI_LINE_NUM_PRIM	:= arrDALI_LINE_NUM_LIGHT[2], 
														DALI_LINE_NUM_SEC		:= 0, 
														DALI_LINE_NUM_SUPL	:= arrDALI_LINE_NUM_PENDANTS[2])];
	
	arrstLiveDataGruppe			: ARRAY [1..2] OF SH_Light.ST_LiveData;
	arrRunTuningGruppe			: ARRAY[1..2] OF BOOL;
	
	bTopButtonZone1				: BOOL;
	bTopButtonZone1_Visu		: BOOL;
	bBottomButtonZone1			: BOOL;
	bBottomButtonZone1_Visu	: BOOL;
	bButtonZone2					: BOOL;
	bNeighborRoomsPir			: BOOL;
	fLuxOn								: REAL;
	fLuxDim							: REAL;
	tPIRDim							: TIME;
	tPIROff							: TIME;
	fOffsetSec						: REAL := 20;
	bOccupiedRoom				: BOOL;

// Sensor Settings
	fbSensor						: SH_Light.FB_NIKO_P46xx_4Pcs;
	arrSensorAddr				: ARRAY[1..4] OF BYTE :=[1,2,3,4];  
	bInitialize						: BOOL := TRUE;
	stDaliSensorSetup			: ST_DALI_NIKOP46SetupData;
	arrInitErr						: ARRAY [1..4] OF BOOL;
	arrInitDone					: ARRAY [1..4] OF BOOL;
	arrSensorScales				: ARRAY [1..10] OF SH_Light.ST_DALI_SensorScaleMode := [
																							(fMeassureMaxSensor := rMeassure_Zone10, fReadMaxSensor := rRead_Zone10),
																							(fMeassureMaxSensor := rMeassure_Zone10, fReadMaxSensor := rRead_Zone10),
																							(fMeassureMaxSensor := rMeassure_Zone10, fReadMaxSensor := rRead_Zone10),
																							(fMeassureMaxSensor := rMeassure_Zone10, fReadMaxSensor := rRead_Zone10),
																							6(())];
	
																					
	bCancelHoldTimerOccupancy	: BOOL;
	
(*	eEventPriorityOccupancy		: E_DALIEventPriority := E_DALIEVENTPRIORITY.Middle;
	nHoldTimerOccupancy			: WORD := 5; // Value in s. 	
	nReportTimerOccupancy		: BYTE := 120; // Value in s, Preset manufacturer value
	nDeadtimeTimerOccupancy		: WORD := 100; // Value in ms, Predefined Value of DALI Standard
	bCancelHoldTimerOccupancy	: BOOL;
	nSensitivityOccupancy		: BYTE:= 3; //setting Sensivity (0..4) 0 (Off), 1 (Min), 2(Low), 3(High) and 4 (Max)

	bEnableLuxEvent				: BOOL;
	eEventPriorityBrightness	: E_DALIEventPriority := E_DALIEVENTPRIORITY.Middle;
	nDeadtimeTimerBrightness	: WORD := 1500; // Value in ms, Predefined Value of DALI Standard
	nHysteresisBrightness		: BYTE := 2; // Value in %
	nHysteresisMinBrightness	: BYTE := 10; // Absolute Value, depending on the manufacturer specific resolution
	nReportTimerBrightness		: BYTE := 120; // Value in s, Preset manufacturer value
*)

	//ModbusComm setup
	
	fbWriteSPLuxLevel				: SH_Light.FB_TwoVal_SelectOne_RTrigChange;
	fbWritePirDelayTIme			: SH_Light.FB_TwoVal_SelectOne_RTrigChange;
	stRoomDataPLC					: SH_Light.ST_RoomDataPLC	:=	(
																		uiPirOffDelayTime	:= 30,
																		uiSpLuxLevel			:= 500,
																		uiPirDimDelayTime	:= 15,
																		uiSpDimLuxLevel		:= 200);
																		
	fbBallastOnHours				: SH_Light.FB_CountOnHours;
	bEnableHourCount			: BOOL := TRUE;
	
	//Non-persistent modbus data
	bPirActive_MB					AT %MX134.0		: BOOL;				//bPirLys i gammel kode
	uiActLuxLevel_MB			AT %MB138		: UINT;				//intHMIAktueltLux i gammel kode
	uiActLightLevelPct_MB	AT %MB142		: UINT;				//intDALI_Gruppe1_Lysniveau i gammel kode
	
	//For Conversion
	uiPirOffMinutes						: UINT;
	udTimeScaling						: UDINT := 60000;
	uiLuxOn								: UINT;
	
	//max values checks
	uiMaxLuxLevel						: UINT := 1023;
	uiMaxPirOffMinutes				: UINT := 180;

END_VAR

VAR CONSTANT
	Sensor_DALI_LINE_NUM		: BYTE := 2;
    arrDALI_LINE_NUM_LIGHT: ARRAY[1..2] OF BYTE := [2,1]; //korrekt rækkefølge nødvendig //rækkefølge og linje 
	arrDALI_LINE_NUM_PENDANTS: ARRAY[1..2] OF BYTE := [1,0]; //korrekt rækkefølge nødvendig. 0 = ingen pendler
END_VAR
VAR PERSISTENT
	stPirSensorData			: SH_Light.ST_DALI_Sensor;
	arrstTuneDataGruppe	: ARRAY [1..2] OF SH_Light.ST_TuneData_EX;
	
	uiPirOffDelayTime_MB		AT %MB136	: UINT;				//ntHMI_Pir_SetValue i gammel kode
	uiSPLuxLevel_MB			AT %MB140	: UINT;				//intHMI_Lux_SetValue i gammel kode
	uiBallastOnHours_MB		AT %MB144	: UINT;				//dintHMILysbraendtimer1 i gammel kode
	byOnHoursOverflowCount						: BYTE;
END_VAR

]]></Declaration>
    <Implementation>
      <ST><![CDATA[A_Buttons();
A_LightCtrl();
A_ModbusComm();
A_Sensor();
]]></ST>
    </Implementation>
    <Action Name="A_Buttons" Id="{fce64bae-1c46-4c2a-a8cd-0bcb96c0140f}">
      <Implementation>
        <ST><![CDATA[bTopButtonZone1		:= bTopButtonZone1_Visu;
bBottomButtonZone1	:= bBottomButtonZone1_Visu;]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_LightCtrl" Id="{7662888c-fb62-4177-a881-877f6f86fa57}">
      <Implementation>
        <ST><![CDATA[bNeighborRoomsPir := 	P_Rum_6_223.stPirSensorData.bPrc OR
									P_Rum_6_224.stPirSensorData.bPrc OR
									P_Rum_6_225.stPirSensorData.bPrc OR
									P_Rum_6_226A.stPirSensorData.bPrc OR
									P_Rum_6_226B.stPirSensorData.bPrc OR
									P_Rum_6_227.stPirSensorData.bPrc OR
									P_Rum_6_228.stPirSensorData.bPrc OR
									P_Rum_6_229.stPirSensorData.bPrc OR
									P_Rum_6_230.stPirSensorData.bPrc OR
									P_Rum_6_231.stPirSensorData.bPrc OR
									P_Rum_6_233.stPirSensorData.bPrc OR
									P_Rum_6_235.stPirSensorData.bPrc OR
									GVL_AHDataModbus.arrAH_NeighborRoomsPir[24][1];

arrfbLysGruppe[1]( 
	nZoneID:= 1, 
	bButtonZone1:= bTopButtonZone1,
	bBottomButtonZone1 := bBottomButtonZone1, 
	//bTopButtonOverride := ,
	//bBottomButtonOverride := ,
	bButtonZone2:= bButtonZone2,
	bNoButtons := TRUE,
	bNeighborRoomsPir	:=	bNeighborRoomsPir,
	fLuxOn:= fLuxOn, 
	fLuxDim:= fLuxDim, 
	tPIRDim:= tPIRDim, 
	tPIROff:= tPIROff, 
	fOffsetSec:= fOffsetSec, 
	bReInit:= , 
	stDaliSetup:= arrstDaliSetupGruppe[1], 
	ipCommunication_Prim:= P_DALI_Background.arrfbKL6821Communication[arrDALI_LINE_NUM_LIGHT[1]], 
	//ipCommunication_Sec:= P_DALI_Background.arrfbKL6821Communication[arrDALI_LINE_NUM_LIGHT[1]],
	ipCommunication_Supl:= P_DALI_Background.arrfbKL6821Communication[arrDALI_LINE_NUM_PENDANTS[1]],
	fMinOutputPowerLevelRoom:= 15, 
	fMaxOutputPowerLevelRoom:= 100, 
	nCycleTimeInMS:= SH_Light.DALI_Param.nPlcTaskCycleTimeInMS*nDimCmdCycleTimeFactor , 
	bRunTuning:= arrRunTuningGruppe[1], 
	bOccupiedRoom=> , 
	bError_Prim=> , 
	nError_Prim=> , 
	stTuneData:=arrstTuneDataGruppe[1] , 
	stPirSensorData:= stPirSensorData, 					//samme sensordata
	stLiveData:= arrstLiveDataGruppe[1]);

	
arrfbLysGruppe[2]( 
	nZoneID:= 1, 
	bButtonZone1:= bTopButtonZone1,
	bBottomButtonZone1 := bBottomButtonZone1,
	//bTopButtonOverride := ,
	//bBottomButtonOverride := ,
	bButtonZone2:= bButtonZone2,
	bNoButtons := TRUE,
	bNeighborRoomsPir	:=	bNeighborRoomsPir,
	fLuxOn:= fLuxOn, 
	fLuxDim:= fLuxDim, 
	tPIRDim:= tPIRDim, 
	tPIROff:= tPIROff, 
	fOffsetSec:= fOffsetSec, 
	bReInit:= , 
	stDaliSetup:= arrstDaliSetupGruppe[2], 
	ipCommunication_Prim:= P_DALI_Background.arrfbKL6821Communication[arrDALI_LINE_NUM_LIGHT[2]], 
	//ipCommunication_Sec:= P_DALI_Background.arrfbKL6821Communication[arrDALI_LINE_NUM_LIGHT[2]],
	//ipCommunication_Supl:= P_DALI_Background.arrfbKL6821Communication[arrDALI_LINE_NUM_PENDANTS[2]],
	fMinOutputPowerLevelRoom:= 15, 
	fMaxOutputPowerLevelRoom:= 100, 
	nCycleTimeInMS:= SH_Light.DALI_Param.nPlcTaskCycleTimeInMS*nDimCmdCycleTimeFactor , 
	bRunTuning:= arrRunTuningGruppe[2], 
	bOccupiedRoom=> , 
	bError_Prim=> , 
	nError_Prim=> , 
	stTuneData:=arrstTuneDataGruppe[2] , 
	stPirSensorData:= stPirSensorData, 					//samme sensordata
	stLiveData:= arrstLiveDataGruppe[2]);	]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_ModbusComm" Id="{a3617712-58d6-466e-8979-ae515aa6dffa}">
      <Implementation>
        <ST><![CDATA[//Manage data for modbus communication

//Manage data for read-only in PLC
stRoomDataPLC.bPirActive			:= stPirSensorData.bPrc;
stRoomDataPLC.uiActLuxLevel			:= TO_UINT(TRUNC(stPirSensorData.fBrightness));
stRoomDataPLC.uiActLightLevelPct	:= TO_UINT(TRUNC(arrfbLysGruppe[1].fbBallast.fActlLgtLvl_Prim));
		//stRoomDataPLC.uiActLightLevelPct	:= TO_UINT(TRUNC(fbLys.fbBallast.fActlLgtLvl_Prim)); //if only one group light control
stRoomDataPLC.uiBallastOnHours		:= uiBallastOnHours_MB; //The calculation for BallastOnHours is stored directly to the MB register below


//Assign data for read-only to MB registers
bPirActive_MB			:= stRoomDataPLC.bPirActive;
uiActLuxLevel_MB		:= stRoomDataPLC.uiActLuxLevel;
uiActLightLevelPct_MB	:= stRoomDataPLC.uiActLightLevelPct;

	//calculate BallastOnHours
	fbBallastOnHours(
		bEnableHourCount	:= bEnableHourCount,
		bPauseCount			:= arrfbLysGruppe[1].fbLightCtrl.bOffZone1,
		uiOnHours			:= uiBallastOnHours_MB,			//OnHours is updated here
		byOverflowCount		:= byOnHoursOverflowCount);


//Manage data for read/write for both PLC and MB registers
fbWriteSPLuxLevel(	nMaxValOut	:= uiMaxLuxLevel,
					nValIn1		:= uiSPLuxLevel_MB,		//nValIn1 takes priotity in case of download or restart
					nValIn2		:= stRoomDataPLC.uiSpLuxLevel,
					nValOut		=> uiLuxOn
				);


fbWritePirDelayTIme(	nMaxValOut	:= uiMaxPirOffMinutes,
						nValIn1		:= uiPirOffDelayTime_MB,		//nValIn1 takes priotity in case of download or restart
						nValIn2		:= stRoomDataPLC.uiPirOffDelayTime,
						nValOut		=> uiPirOffMinutes
					);
					

//Convert read/write modbus data to appropriate datatypes in PLC
fLuxOn	:= TO_REAL(uiLuxOn);			
tPIROff	:= TO_TIME(uiPirOffMinutes*udTimeScaling); //Time conversion defaults to ms

fLuxDim	:= TO_REAL(stRoomDataPLC.uiSpDimLuxLevel);			
tPIRDim	:= TO_TIME(stRoomDataPLC.uiPirDimDelayTime*udTimeScaling); //Time conversion defaults to ms
]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_Sensor" Id="{592029cb-52d5-42d9-86f4-21149a2a79af}">
      <Implementation>
        <ST><![CDATA[
fbSensor.ipCommunication := P_DALI_Background.arrfbKL6821Communication[Sensor_DALI_LINE_NUM];

(*
//only 1 sensor
fbSensor(
	byShrtAdr:= bySensorAddr,
	bInitialize:= bInitialize, 
	DALI_LINE_NUM:= Sensor_DALI_LINE_NUM, 
 	//bCancelHoldTimerOccupancy:= bCancelHoldTimerOccupancy, 
	stSensorSetup := stDaliSensorSetup,
	bInitErr=> bInitErr, 
	bInitDone=> bInitDone,
	stPirSensorData:= stPirSensorData, 
	arrSensorScales:= arrSensorScales);
*)

fbSensor(
	arrShrtAdr:= arrSensorAddr,
	bInitialize:= bInitialize, 
	DALI_LINE_NUM:= Sensor_DALI_LINE_NUM, 
 	//bCancelHoldTimerOccupancy:= bCancelHoldTimerOccupancy, 
	stSensorSetup := stDaliSensorSetup,
	arrInitErr=> arrInitErr, 
	arrInitDone=> arrInitDone,
	stPirSensorData:= stPirSensorData, 
	arrSensorScales:= arrSensorScales);
	
]]></ST>
      </Implementation>
    </Action>
  </POU>
</TcPlcObject>