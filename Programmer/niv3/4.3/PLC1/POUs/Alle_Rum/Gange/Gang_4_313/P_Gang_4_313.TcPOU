<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="P_Gang_4_313" Id="{8874c306-f713-4437-a8db-cb25cc310e02}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM P_Gang_4_313
VAR
(*Gangen består af to lysgrupper - 3 og 5 - på to forskellige DALI-linjer - 3 og 1 henh..
Begge grupper afhænger af samme PIR-signaler - pir-adr 1 - på DALI-linje 2.
Derfor oprettes to adskilte reguleringer med samme PV. Dvs., at knapfunktion og pirfunktion forbliver den samme.*)

	arrfbLysGruppe			: ARRAY [1..2] OF FB_Light_Type_B;
	arrstDaliSetupGruppe	: ARRAY[1..2] OF SH_Light.ST_DALI_RoomSetup := 
	
													[(	byShrtAdr_Prim := 21, 
														byGrpAdr_Prim := 3, 
														eMod_Prim := E_DALIAddressType.Group, 
													//	byShrtAdr_Sec := 1, 
													///	byGrpAdr_Sec := 1, 
													//	eMod_Sec := E_DALIAddressType.Short, 
														byShrtAdr_Supl := 43, 
														DALI_LINE_NUM_PRIM := arrDALI_LINE_NUM_LIGHT[1], 
														DALI_LINE_NUM_SEC := 0, 
														DALI_LINE_NUM_SUPL := DALI_LINE_NUM_PENDANTS),
														
													(	byShrtAdr_Prim := 24, 
														byGrpAdr_Prim := 5, 
														eMod_Prim := E_DALIAddressType.Group, 
													//	byShrtAdr_Sec := 1, 
													//	byGrpAdr_Sec := 1, 
													//	eMod_Sec := E_DALIAddressType.Short, 
													//	byShrtAdr_Supl := 1, 
														DALI_LINE_NUM_PRIM := arrDALI_LINE_NUM_LIGHT[2], 
														DALI_LINE_NUM_SEC := 0, 
														DALI_LINE_NUM_SUPL := 0)];
														
	arrstLiveDataGruppe		: ARRAY [1..2] OF SH_Light.ST_LiveData;
	//stLiveData AT %MB22	: SH_Light.ST_LiveData;
	
	arrRunTuningGruppe: ARRAY[1..2] OF BOOL;
	
	
	
	bButtonZone1			: BOOL;
	bButtonZone1_Visu		: BOOL;
	bBottomButtonZone1		: BOOL;
	bBottomButtonZone1_Visu	: BOOL;
	bButtonZone2			: BOOL;
	bNeighborRoomsPir		: BOOL;
	fLuxOn					: REAL;
	fLuxDim					: REAL;
	tPIRDim					: TIME;
	tPIROff					: TIME ;
	fOffsetSec				: REAL := 20;



// Sensor Settings
	fbSensor					: SH_Light.FB_NIKO_P46xx_1Pcs;
	//fbSensor					: SH_Light.FB_NIKO_P46xx_5Pcs;
	bySensorAddr				: BYTE := 1;
	//arrSensorAddr				: ARRAY[1..5] OF BYTE := [6,7,8,9,10];
	bInitialize					: BOOL := TRUE;
	stDaliSensorSetup			: ST_DALI_NIKOP46SetupData;
	bInitErr					: BOOL;
	bInitDone					: BOOL;
	//arrInitErr				: ARRAY [1..5] OF BOOL;
	//arrInitDone				: ARRAY [1..5] OF BOOL;
	arrSensorScales				: ARRAY [1..10] OF SH_Light.ST_DALI_SensorScaleMode := [	(fMeassureMaxSensor := rMeassure_Zone5, fReadMaxSensor := rRead_Zone5),																							
																						9(())];
	bCancelHoldTimerOccupancy	: BOOL;
(*	eEventPriorityOccupancy		: E_DALIEventPriority := E_DALIEVENTPRIORITY.Middle;
	nHoldTimerOccupancy			: WORD := 5; // Value in s. 	
	nReportTimerOccupancy		: BYTE := 120; // Value in s, Preset manufacturer value
	nDeadtimeTimerOccupancy		: WORD := 100; // Value in ms, Predefined Value of DALI Standard
	bCancelHoldTimerOccupancy	: BOOL;
	nSensitivityOccupancy		: BYTE:= 3; //setting Sensivity (0..4) 0 (Off), 1 (Min), 2(Low), 3(High) and 4 (Max)

	bEnableLuxEvent				: BOOL;
	eEventPriorityBrightness	: E_DALIEventPriority := E_DALIEVENTPRIORITY.Middle;
	nDeadtimeTimerBrightness	: WORD := 1500; // Value in ms, Predefined Value of DALI Standard
	nHysteresisBrightness		: BYTE := 2; // Value in %
	nHysteresisMinBrightness	: BYTE := 10; // Absolute Value, depending on the manufacturer specific resolution
	nReportTimerBrightness		: BYTE := 120; // Value in s, Preset manufacturer value
*)
//////////



/////////



	//ModbusComm setup  //////////////
	
	fbWriteSPLuxLevel			: SH_Light.FB_TwoVal_SelectOne_RTrigChange;
	fbWritePirDelayTIme			: SH_Light.FB_TwoVal_SelectOne_RTrigChange;
	stRoomDataPLC				: SH_Light.ST_RoomDataPLC	:=	(	uiPirOffDelayTime	:= 30,
																	uiSpLuxLevel		:= 500,
																	uiPirDimDelayTime	:= 15,
																	uiSpDimLuxLevel		:= 200
																);
	fbBallastOnHours			: SH_Light.FB_CountOnHours;
	bEnableHourCount			: BOOL := TRUE;
	
	//Non-persistent modbus data
	bPirActive_MB			AT %MX118.0	: BOOL;				//bPirLys i gammel kode
	uiActLuxLevel_MB		AT %MB122	: UINT;				//intHMIAktueltLux i gammel kode
	uiActLightLevelPct_MB	AT %MB126	: UINT;				//intDALI_Gruppe1_Lysniveau i gammel kode
	
	//For Conversion
	uiPirOffMinutes						: UINT;
	udTimeScaling						: UDINT := 60000;
	uiLuxOn								: UINT;
	
	//max values checks
	uiMaxLuxLevel						: UINT := 1023;
	uiMaxPirOffMinutes					: UINT := 180;

END_VAR


VAR CONSTANT
	Sensor_DALI_LINE_NUM	: BYTE := 2;
	arrDALI_LINE_NUM_LIGHT	: ARRAY[1..2] OF BYTE := [3,1]; //correct order necessary
	DALI_LINE_NUM_PENDANTS	: BYTE := 3;
END_VAR
VAR PERSISTENT
	stPirSensorData: SH_Light.ST_DALI_Sensor;
	arrstTuneDataGruppe: ARRAY [1..2] OF SH_Light.ST_TuneData_EX;

	
	uiPirOffDelayTime_MB	AT %MB120	: UINT;				//ntHMI_Pir_SetValue i gammel kode
	uiSPLuxLevel_MB			AT %MB124	: UINT;				//intHMI_Lux_SetValue i gammel kode
	uiBallastOnHours_MB		AT %MB128	: UINT;				//dintHMILysbraendtimer1 i gammel kode
	byOnHoursOverflowCount				: BYTE;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[A_Buttons();
A_LightCtrl();
A_Sensor();
A_ModbusComm(); ]]></ST>
    </Implementation>
    <Action Name="A_Buttons" Id="{905b5ec8-9f33-48f8-8135-33780b608c67}">
      <Implementation>
        <ST><![CDATA[bButtonZone1		:= GVL_EnOcean.strEnOceanSwitch_Gang_4_313_Indgang.bT2_ON OR bButtonZone1_Visu;
bBottomButtonZone1	:= GVL_EnOcean.strEnOceanSwitch_Gang_4_313_Indgang.bT2_OFF OR bBottomButtonZone1_Visu;

bButtonZone2		:= GVL_EnOcean.strEnOceanSwitch_Gang_4_313_Pendler.bT2_ON OR GVL_EnOcean.strEnOceanSwitch_Gang_4_313_Pendler.bT2_OFF;
]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_LightCtrl" Id="{9643fa39-638b-4781-a55e-192d05a01ac8}">
      <Implementation>
        <ST><![CDATA[bNeighborRoomsPir	:=  P_Rum_4_307.stPirSensorData.bPrc OR
						P_Rum_4_311.stPirSensorData.bPrc OR
						P_Rum_4_313.stPirSensorData.bPrc OR
						P_Rum_4_317.stPirSensorData.bPrc;

//gruppe 3
arrfbLysGruppe[1]( 
	nZoneID:= 1, 
	bButtonZone1:= bButtonZone1,
	bBottomButtonZone1 := bBottomButtonZone1, 
	bButtonZone2:= bButtonZone2,
	bNeighborRoomsPir	:=	bNeighborRoomsPir,
	fLuxOn:= fLuxOn, 
	fLuxDim:= fLuxDim, 
	tPIRDim:= tPIRDim, 
	tPIROff:= tPIROff, 
	fOffsetSec:= fOffsetSec, 
	bReInit:= , 
	stDaliSetup:= arrstDaliSetupGruppe[1], 
	ipCommunication_Prim:= P_DALI_Background.arrfbKL6821Communication[arrDALI_LINE_NUM_LIGHT[1]], 
	//ipCommunication_Sec:= P_DALI_Background.arrfbKL6821Communication[arrDALI_LINE_NUM_LIGHT[1]], 
	ipCommunication_Supl:= P_DALI_Background.arrfbKL6821Communication[arrDALI_LINE_NUM_LIGHT[1]], 
	fMinOutputPowerLevelRoom:= 15, 
	fMaxOutputPowerLevelRoom:= 100, 
	nCycleTimeInMS:= SH_Light.DALI_Param.nPlcTaskCycleTimeInMS*nDimCmdCycleTimeFactor , 
	bRunTuning:= arrRunTuningGruppe[1], 
	bOccupiedRoom=> , 
	bError_Prim=> , 
	nError_Prim=> , 
	stTuneData:=arrstTuneDataGruppe[1] , 
	stPirSensorData:= stPirSensorData, 					//samme sensordata
	stLiveData:= arrstLiveDataGruppe[1]);

//gruppe 5	
arrfbLysGruppe[2]( 
	nZoneID:= 1, 
	bButtonZone1:= bButtonZone1,
	bBottomButtonZone1 := bBottomButtonZone1, 
	bButtonZone2:= ,
	bNeighborRoomsPir	:=	bNeighborRoomsPir,
	fLuxOn:= fLuxOn, 
	fLuxDim:= fLuxDim, 
	tPIRDim:= tPIRDim, 
	tPIROff:= tPIROff, 
	fOffsetSec:= fOffsetSec, 
	bReInit:= , 
	stDaliSetup:= arrstDaliSetupGruppe[2], 
	ipCommunication_Prim:= P_DALI_Background.arrfbKL6821Communication[arrDALI_LINE_NUM_LIGHT[2]], 
//	ipCommunication_Sec:= P_DALI_Background.arrfbKL6821Communication[arrDALI_LINE_NUM_LIGHT[2]], 
//	ipCommunication_Supl:= P_DALI_Background.arrfbKL6821Communication[arrDALI_LINE_NUM_LIGHT[2]], 
	fMinOutputPowerLevelRoom:= 15, 
	fMaxOutputPowerLevelRoom:= 100, 
	nCycleTimeInMS:= SH_Light.DALI_Param.nPlcTaskCycleTimeInMS*nDimCmdCycleTimeFactor, 
	bRunTuning:= arrRunTuningGruppe[2], 
	bOccupiedRoom=> , 
	bError_Prim=> , 
	nError_Prim=> , 
	stTuneData:=arrstTuneDataGruppe[2] , 
	stPirSensorData:= stPirSensorData, 					//samme sensordata
	stLiveData:= arrstLiveDataGruppe[2]);	]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_ModbusComm" Id="{61875d21-baf2-46ad-b278-e73d655688d6}">
      <Implementation>
        <ST><![CDATA[//Manage data for modbus communication

//Manage data for read-only in PLC
stRoomDataPLC.bPirActive			:= stPirSensorData.bPrc;
stRoomDataPLC.uiActLuxLevel			:= TO_UINT(TRUNC(stPirSensorData.fBrightness));
stRoomDataPLC.uiActLightLevelPct	:= TO_UINT(TRUNC(arrfbLysGruppe[1].fbBallast.fActlLgtLvl_Prim));
		//stRoomDataPLC.uiActLightLevelPct	:= TO_UINT(TRUNC(fbLys.fbBallast.fActlLgtLvl_Prim)); //if only one group light control
stRoomDataPLC.uiBallastOnHours		:= uiBallastOnHours_MB; //The calculation for BallastOnHours is stored directly to the MB register below


//Assign data for read-only to MB registers
bPirActive_MB			:= stRoomDataPLC.bPirActive;
uiActLuxLevel_MB		:= stRoomDataPLC.uiActLuxLevel;
uiActLightLevelPct_MB	:= stRoomDataPLC.uiActLightLevelPct;

	//calculate BallastOnHours
	fbBallastOnHours(
		bEnableHourCount	:= bEnableHourCount,
		bPauseCount			:= arrfbLysGruppe[1].fbLightCtrl.bOffZone1,
		uiOnHours			:= uiBallastOnHours_MB,			//OnHours is updated here
		byOverflowCount		:= byOnHoursOverflowCount);


//Manage data for read/write for both PLC and MB registers
fbWriteSPLuxLevel(	nMaxValOut	:= uiMaxLuxLevel,
					nValIn1		:= uiSPLuxLevel_MB,		//nValIn1 takes priotity in case of download or restart
					nValIn2		:= stRoomDataPLC.uiSpLuxLevel,
					nValOut		=> uiLuxOn
				);


fbWritePirDelayTIme(	nMaxValOut	:= uiMaxPirOffMinutes,
						nValIn1		:= uiPirOffDelayTime_MB,		//nValIn1 takes priotity in case of download or restart
						nValIn2		:= stRoomDataPLC.uiPirOffDelayTime,
						nValOut		=> uiPirOffMinutes
					);
					

//Convert read/write modbus data to appropriate datatypes in PLC
fLuxOn	:= TO_REAL(uiLuxOn);			
tPIROff	:= TO_TIME(uiPirOffMinutes*udTimeScaling); //Time conversion defaults to ms

fLuxDim	:= TO_REAL(stRoomDataPLC.uiSpDimLuxLevel);			
tPIRDim	:= TO_TIME(stRoomDataPLC.uiPirDimDelayTime*udTimeScaling); //Time conversion defaults to ms
]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_Sensor" Id="{de7f3a72-a8be-449d-b520-abdd67db0879}">
      <Implementation>
        <ST><![CDATA[
fbSensor.ipCommunication := P_DALI_Background.arrfbKL6821Communication[Sensor_DALI_LINE_NUM];

//only 1 sensor
fbSensor(
	byShrtAdr:= bySensorAddr,
	bInitialize:= bInitialize, 
	DALI_LINE_NUM:= Sensor_DALI_LINE_NUM, 
 	//bCancelHoldTimerOccupancy:= bCancelHoldTimerOccupancy, 
	stSensorSetup := stDaliSensorSetup,
	bInitErr=> bInitErr, 
	bInitDone=> bInitDone,
	stPirSensorData:= stPirSensorData, 
	arrSensorScales:= arrSensorScales);


(*//several sensors	
fbSensor(
	arrShrtAdr:= arrSensorAddr,
	bInitialize:= bInitialize, 
	DALI_LINE_NUM:= Sensor_DALI_LINE_NUM, 
 	//bCancelHoldTimerOccupancy:= bCancelHoldTimerOccupancy, 
	stSensorSetup := stDaliSensorSetup,
	arrInitErr=> arrInitErr, 
	arrInitDone=> arrInitDone,
	stPirSensorData:= stPirSensorData, 
	arrSensorScales:= arrSensorScales);
	*)]]></ST>
      </Implementation>
    </Action>
  </POU>
</TcPlcObject>