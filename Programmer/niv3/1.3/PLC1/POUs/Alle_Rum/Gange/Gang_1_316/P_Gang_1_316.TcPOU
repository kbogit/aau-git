<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="P_Gang_1_316" Id="{a15fb680-c470-41cb-83d7-1031130193e4}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM P_Gang_1_316
VAR
(*Gangen består af to lysgrupper - 9 og 14 - på to forskellige DALI-linjer - 1 og 2 henh.. Begge grupper afhænger af samme PIR-signaler - device 17 på DALI-linje 3.
Derfor oprettes to adskilte reguleringer med samme PV. Dvs., at knapfunktion og pirfunktion forbliver den samme*)

	arrfbLysGruppe			: ARRAY[1..2] OF FB_Light_Type_B;
	
	arrstDaliSetupGruppe	: ARRAY[1..2] OF SH_Light.ST_DALI_RoomSetup := 
														[(	byShrtAdr_Prim := 36, 
															byGrpAdr_Prim := 9, 
															eMod_Prim := E_DALIAddressType.Group, 
															//byShrtAdr_Sec := 1, 
															//byGrpAdr_Sec := 1, 
															//eMod_Sec := E_DALIAddressType.Short, 
															//byShrtAdr_Supl := 1,
															//byGrpAdr_Supl := 1,
															//eMod_Supl :=  E_DALIAddressType.Short,
															DALI_LINE_NUM_PRIM := arrDALI_LINE_NUM_LIGHT[1], 
															DALI_LINE_NUM_SEC := 0, 
															DALI_LINE_NUM_SUPL := arrDALI_LINE_NUM_PENDANTS[1]),
														
														(	byShrtAdr_Prim := 51, 
															byGrpAdr_Prim := 14, 
															eMod_Prim := E_DALIAddressType.Group, 
															//byShrtAdr_Sec := 1, 
															//byGrpAdr_Sec := 1, 
															//eMod_Sec := E_DALIAddressType.Short, 
															//byShrtAdr_Supl := 1,
															//byGrpAdr_Supl := 1,
															//eMod_Supl :=  E_DALIAddressType.Short,
															DALI_LINE_NUM_PRIM := arrDALI_LINE_NUM_LIGHT[2], 
															DALI_LINE_NUM_SEC := 0, 
															DALI_LINE_NUM_SUPL := arrDALI_LINE_NUM_PENDANTS[2])];
															
	arrstLiveDataGruppe				: ARRAY[1..2] OF SH_Light.ST_LiveData;
	arrRunTuningGruppe				: ARRAY[1..2] OF BOOL;
	
	bTopButtonZone1					: BOOL;
	bTopButtonZone1_Visu			: BOOL;
	bBottomButtonZone1				: BOOL;
	bBottomButtonZone1_Visu	        : BOOL;
	bButtonZone2					: BOOL;
	bNeighborRoomsPir				: BOOL;
	fLuxOn							: REAL;
	fLuxDim							: REAL;
	tPIRDim							: TIME;
	tPIROff							: TIME;
	fOffsetSec						: REAL := 20;
	bOccupiedRoom		        	: BOOL;


// Sensor Settings
	fbSensor						: SH_Light.FB_NIKO_P46xx_1Pcs;
	//fbSensor						: SH_Light.FB_NIKO_P46xx_3Pcs;
	bySensorAddr				    : BYTE := 17;
	//arrSensorAddr				    : ARRAY[1..3] OF BYTE := [14,15,16];
	bInitialize						: BOOL := TRUE;
	stDaliSensorSetup			      : ST_DALI_NIKOP46SetupData := (
																nSensitivityPIRSegmentA:=bySensitivityOccupancy,
																nSensitivityPIRSegmentB:=bySensitivityOccupancy,
																nSensitivityPIRSegmentC:=bySensitivityOccupancy);
	bInitErr							: BOOL;
	bInitDone						: BOOL;
	//arrInitErr						: ARRAY [1..3] OF BOOL;
	//arrInitDone					: ARRAY [1..3] OF BOOL;
	arrSensorScales				: ARRAY [1..10] OF SH_Light.ST_DALI_SensorScaleMode := [
																						(fMeassureMaxSensor := 600, fReadMaxSensor := 1023), //forhold meas/read<1 benyttes, da kun én sensor indgår i regulering for hele gangen
																						9(())];
																						
	bCancelHoldTimerOccupancy	: BOOL;
(*	eEventPriorityOccupancy		: E_DALIEventPriority := E_DALIEVENTPRIORITY.Middle;
	nHoldTimerOccupancy			: WORD := 5; // Value in s. 	
	nReportTimerOccupancy		: BYTE := 120; // Value in s, Preset manufacturer value
	nDeadtimeTimerOccupancy		: WORD := 100; // Value in ms, Predefined Value of DALI Standard
	bCancelHoldTimerOccupancy	: BOOL;
	nSensitivityOccupancy		: BYTE:= 3; //setting Sensivity (0..4) 0 (Off), 1 (Min), 2(Low), 3(High) and 4 (Max)

	bEnableLuxEvent				: BOOL;
	eEventPriorityBrightness	: E_DALIEventPriority := E_DALIEVENTPRIORITY.Middle;
	nDeadtimeTimerBrightness	: WORD := 1500; // Value in ms, Predefined Value of DALI Standard
	nHysteresisBrightness		: BYTE := 2; // Value in %
	nHysteresisMinBrightness	: BYTE := 10; // Absolute Value, depending on the manufacturer specific resolution
	nReportTimerBrightness		: BYTE := 120; // Value in s, Preset manufacturer value
*)

	//ModbusComm setup
	
	fbWriteSPLuxLevel				: SH_Light.FB_TwoVal_SelectOne_RTrigChange;
	fbWritePirDelayTIme			: SH_Light.FB_TwoVal_SelectOne_RTrigChange;
	stRoomDataPLC					: SH_Light.ST_RoomDataPLC	:=	(
																										uiPirOffDelayTime	:= 30,
																										uiSpLuxLevel			:= 500,
																										uiPirDimDelayTime	:= 15,
																										uiSpDimLuxLevel		:= 200);
																
	fbBallastOnHours					: SH_Light.FB_CountOnHours;
	bEnableHourCount				: BOOL := TRUE;
	
	//Non-persistent modbus data
	bPirActive_MB						AT%MX460.0		: BOOL;				//bPirLys i gammel kode
	uiActLuxLevel_MB			    	AT%MB464			: UINT;				//intHMIAktueltLux i gammel kode
	uiActLightLevelPct_MB	        	AT%MB468			: UINT;				//intDALI_Gruppe1_Lysniveau i gammel kode
	
	//For Conversion
	uiPirOffMinutes						: UINT;
	udTimeScaling						: UDINT := 60000;
	uiLuxOn								: UINT;
	
	//max values checks
	uiMaxLuxLevel						: UINT := 1023;
	uiMaxPirOffMinutes				: UINT := 180;
END_VAR

VAR CONSTANT
	Sensor_DALI_LINE_NUM				: BYTE := 3;
	arrDALI_LINE_NUM_LIGHT			: ARRAY[1..2] OF BYTE := [1,2];
	arrDALI_LINE_NUM_PENDANTS: ARRAY[1..2] OF BYTE := [0,0];
	bySensitivityOccupancy						: BYTE := 4; //setting Sensivity (0..4) 0 (Off), 1 (Min), 2(Low), 3(High) and 4 (Max)
END_VAR
VAR PERSISTENT
	stPirSensorData: SH_Light.ST_DALI_Sensor;
	arrstTuneDataGruppe: ARRAY [1..2] OF SH_Light.ST_TuneData_EX;
	
	uiPirOffDelayTime_MB			AT%MB462	    : UINT;				//intHMI_Pir_SetValue i gammel kode
	uiSPLuxLevel_MB		        	AT%MB466		: UINT;				//intHMI_Lux_SetValue i gammel kode
	uiBallastOnHours_MB	    	    AT%MB470	    : UINT;				//dintHMILysbraendtimer1 i gammel kode
	byOnHoursOverflowCount			   					: BYTE;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[A_Buttons();
A_LightCtrl();
A_ModbusComm();
A_Sensor();
]]></ST>
    </Implementation>
    <Action Name="A_Buttons" Id="{2250a326-50c8-419e-80e0-c2f6ac84638f}">
      <Implementation>
        <ST><![CDATA[bTopButtonZone1		:= GVL_EnOcean.strEnOceanSwitch_Gang_1_316.bT1_OFF OR bTopButtonZone1_Visu;
bBottomButtonZone1	:= GVL_EnOcean.strEnOceanSwitch_Gang_1_316.bT1_ON OR bBottomButtonZone1_Visu;
]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_LightCtrl" Id="{8a0429c2-862a-4be6-9c06-4f75834238e9}">
      <Implementation>
        <ST><![CDATA[bNeighborRoomsPir	:= 	P_Gang_1_312A.stPirSensorData.bPrc OR
						P_Gang_1_315.stPirSensorData.bPrc OR
						P_Rum_1_317.stPirSensorData.bPrc OR
						P_Rum_1_318.stPirSensorData.bPrc OR
						P_Rum_1_319.stPirSensorData.bPrc OR
						P_Rum_1_320.stPirSensorData.bPrc OR
						P_Rum_1_321.stPirSensorData.bPrc OR
						P_Rum_1_322.stPirSensorData.bPrc OR
						P_Rum_1_323.stPirSensorData.bPrc OR
						P_Rum_1_324.stPirSensorData.bPrc OR
						P_Rum_1_326.stPirSensorData.bPrc;

arrstTuneDataGruppe[1] := GVL_Skalering.stDefaultTuneData; 	//default benyttes, da kun en sensor styrer hele gangen	
arrfbLysGruppe[1]( 
	nZoneID:= 1, 
	bButtonZone1:= bTopButtonZone1,
	bBottomButtonZone1 := bBottomButtonZone1, 
	bButtonZone2:= bButtonZone2,
	bNeighborRoomsPir	:=	bNeighborRoomsPir,
	fLuxOn:= fLuxOn, 
	fLuxDim:= fLuxDim, 
	tPIRDim:= tPIRDim, 
	tPIROff:= tPIROff, 
	fOffsetSec:= fOffsetSec, 
	bReInit:= , 
	stDaliSetup:= arrstDaliSetupGruppe[1], 
	ipCommunication_Prim:= P_DALI_Background.arrfbKL6821Communication[arrDALI_LINE_NUM_LIGHT[1]], 
	//ipCommunication_Sec:= P_DALI_Background.arrfbKL6821Communication[arrDALI_LINE_NUM_LIGHT[1]], 
	//ipCommunication_Supl:= P_DALI_Background.arrfbKL6821Communication[arrDALI_LINE_NUM_PENDANTS[1]], 
	fMinOutputPowerLevelRoom:= 15, 
	fMaxOutputPowerLevelRoom:= 100, 
	nCycleTimeInMS:= SH_Light.DALI_Param.nPlcTaskCycleTimeInMS*nDimCmdCycleTimeFactor,  //Used only for dim. Factor=2 makes dimming smooth
	bRunTuning:= arrRunTuningGruppe[1], 
	bOccupiedRoom=> , 
	bError_Prim=> , 
	nError_Prim=> , 
	stTuneData:=arrstTuneDataGruppe[1] , 
	stPirSensorData:= stPirSensorData, 
	stLiveData:= arrstLiveDataGruppe[1]);
	
	arrstTuneDataGruppe[2] := GVL_Skalering.stDefaultTuneData; 	//default benyttes, da kun en sensor styrer hele gangen
	arrfbLysGruppe[2]( 
	nZoneID:= 1, 
	bButtonZone1:= bTopButtonZone1,
	bBottomButtonZone1 := bBottomButtonZone1, 
	bButtonZone2:= bButtonZone2,
	bNeighborRoomsPir	:=	bNeighborRoomsPir,
	fLuxOn:= fLuxOn, 
	fLuxDim:= fLuxDim, 
	tPIRDim:= tPIRDim, 
	tPIROff:= tPIROff, 
	fOffsetSec:= fOffsetSec, 
	bReInit:= , 
	stDaliSetup:= arrstDaliSetupGruppe[2], 
	ipCommunication_Prim:= P_DALI_Background.arrfbKL6821Communication[arrDALI_LINE_NUM_LIGHT[2]], 
	//ipCommunication_Sec:= P_DALI_Background.arrfbKL6821Communication[arrDALI_LINE_NUM_LIGHT[1]], 
	//ipCommunication_Supl:= P_DALI_Background.arrfbKL6821Communication[arrDALI_LINE_NUM_PENDANTS[1]], 
	fMinOutputPowerLevelRoom:= 15, 
	fMaxOutputPowerLevelRoom:= 100, 
	nCycleTimeInMS:= SH_Light.DALI_Param.nPlcTaskCycleTimeInMS*nDimCmdCycleTimeFactor,  //Used only for dim. Factor=2 makes dimming smooth
	bRunTuning:= arrRunTuningGruppe[2], 
	bOccupiedRoom=> , 
	bError_Prim=> , 
	nError_Prim=> , 
	stTuneData:=arrstTuneDataGruppe[2] , 
	stPirSensorData:= stPirSensorData, 
	stLiveData:= arrstLiveDataGruppe[2]);
	
]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_ModbusComm" Id="{2693c014-cfa3-4260-aaf5-f388d14a7762}">
      <Implementation>
        <ST><![CDATA[//Manage data for modbus communication

//Manage data for read-only in PLC
stRoomDataPLC.bPirActive			:= stPirSensorData.bPrc;
stRoomDataPLC.uiActLuxLevel			:= TO_UINT(TRUNC(stPirSensorData.fBrightness));
stRoomDataPLC.uiActLightLevelPct	:= TO_UINT(TRUNC(arrfbLysGruppe[1].fbBallast.fActlLgtLvl_Prim));
		//stRoomDataPLC.uiActLightLevelPct	:= TO_UINT(TRUNC(fbLys.fbBallast.fActlLgtLvl_Prim)); //if only one group light control
stRoomDataPLC.uiBallastOnHours		:= uiBallastOnHours_MB; //The calculation for BallastOnHours is stored directly to the MB register below


//Assign data for read-only to MB registers
bPirActive_MB			:= stRoomDataPLC.bPirActive;
uiActLuxLevel_MB		:= stRoomDataPLC.uiActLuxLevel;
uiActLightLevelPct_MB	:= stRoomDataPLC.uiActLightLevelPct;

	//calculate BallastOnHours
	fbBallastOnHours(
		bEnableHourCount	:= bEnableHourCount,
		bPauseCount			:= arrfbLysGruppe[1].fbLightCtrl.bOffZone1,
		uiOnHours			:= uiBallastOnHours_MB,			//OnHours is updated here
		byOverflowCount		:= byOnHoursOverflowCount);


//Manage data for read/write for both PLC and MB registers
fbWriteSPLuxLevel(	nMaxValOut	:= uiMaxLuxLevel,
					nValIn1		:= uiSPLuxLevel_MB,		//nValIn1 takes priotity in case of download or restart
					nValIn2		:= stRoomDataPLC.uiSpLuxLevel,
					nValOut		=> uiLuxOn
				);


fbWritePirDelayTIme(	nMaxValOut	:= uiMaxPirOffMinutes,
						nValIn1		:= uiPirOffDelayTime_MB,		//nValIn1 takes priotity in case of download or restart
						nValIn2		:= stRoomDataPLC.uiPirOffDelayTime,
						nValOut		=> uiPirOffMinutes
					);
					

//Convert read/write modbus data to appropriate datatypes in PLC
fLuxOn	:= TO_REAL(uiLuxOn);			
tPIROff	:= TO_TIME(uiPirOffMinutes*udTimeScaling); //Time conversion defaults to ms

fLuxDim	:= TO_REAL(stRoomDataPLC.uiSpDimLuxLevel);			
tPIRDim	:= TO_TIME(stRoomDataPLC.uiPirDimDelayTime*udTimeScaling); //Time conversion defaults to ms
]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_Sensor" Id="{0acbf619-d541-4a6f-83c7-4f1f97aa5bf8}">
      <Implementation>
        <ST><![CDATA[
fbSensor.ipCommunication := P_DALI_Background.arrfbKL6821Communication[Sensor_DALI_LINE_NUM];

fbSensor(
	byShrtAdr:= bySensorAddr,
	bInitialize:= bInitialize, 
	DALI_LINE_NUM:= Sensor_DALI_LINE_NUM, 
 	//bCancelHoldTimerOccupancy:= bCancelHoldTimerOccupancy, 
	stSensorSetup := stDaliSensorSetup,
	bInitErr=> bInitErr, 
	bInitDone=> bInitDone,
	stPirSensorData:= stPirSensorData, 
	arrSensorScales:= arrSensorScales);
	]]></ST>
      </Implementation>
    </Action>
  </POU>
</TcPlcObject>