<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="P_Gang_5_146" Id="{4e7e89e7-f368-4f72-aad6-baa8c4214038}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM P_Gang_5_146

(*
Gangen består af en lysgruppe som afhænger af sensorer på to forskellige linjer. For at have samme PV sammensættes pirsignaler i A_Sensor
*)
VAR
	fbLys		: FB_Light_Type_B;
	
	stDaliSetup	: SH_Light.ST_DALI_RoomSetup := (
														byShrtAdr_Prim := 35, 
														byGrpAdr_Prim := 4, 
														eMod_Prim := E_DALIAddressType.Group, 
														//byShrtAdr_Sec := 1, 
														//byGrpAdr_Sec := 1, 
														//eMod_Sec := E_DALIAddressType.Short, 
														//byShrtAdr_Supl := 1,
														//byGrpAdr_Supl := 1,
														//eMod_Prim := E_DALIAddressType.Short
														DALI_LINE_NUM_PRIM := DALI_LINE_NUM_LIGHT, 
														DALI_LINE_NUM_SEC := 0, 
														DALI_LINE_NUM_SUPL := DALI_LINE_NUM_PENDANTS);
														
	stLiveData					: SH_Light.ST_LiveData;
	bRunTuning					: BOOL;
	
	bTopButtonZone1			: BOOL;
	bTopButtonZone1_Visu	: BOOL;
	bBottomButtonZone1		: BOOL;
	bBottomButtonZone1_Visu	: BOOL;
	bButtonZone2				: BOOL;
	bNeighborRoomsPir		: BOOL;
	fLuxOn							: REAL;
	fLuxDim						: REAL;
	tPIRDim						: TIME;
	tPIROff						: TIME;
	fOffsetSec					: REAL := 20;
	bOccupiedRoom			: BOOL;


// Sensor Settings
	arrfbSensorLine				: ARRAY [1..2] OF SH_Light.FB_NIKO_P46xx_2Pcs; 
	arrSensorAddr				: ARRAY [1..2] OF ARRAY [1..2] OF BYTE := [[2,3],[1,9]];
	arrInitialize					: ARRAY [1..2] OF BOOL := [TRUE,TRUE];
	arrstDaliSensorSetup		: ARRAY [1..2] OF ST_DALI_NIKOP46SetupData;
	arrInitErr						: ARRAY [1..2] OF ARRAY [1..2] OF BOOL;
	arrInitDone					: ARRAY [1..2] OF ARRAY [1..2] OF BOOL;
	arrSensorScales				: ARRAY [1..2] OF ARRAY [1..10] OF SH_Light.ST_DALI_SensorScaleMode :=	[
																											[	(fMeassureMaxSensor := rMeassure_Zone10, fReadMaxSensor := rRead_Zone10),
																												(fMeassureMaxSensor := rMeassure_Zone10, fReadMaxSensor := rRead_Zone10),																				
																												8(())],

																											[	(fMeassureMaxSensor := rMeassure_Zone10, fReadMaxSensor := rRead_Zone10),
																												(fMeassureMaxSensor := rMeassure_Zone10, fReadMaxSensor := rRead_Zone10),																				
																												8(())]
																										];
	
																						
	bCancelHoldTimerOccupancy	: BOOL;
(*	eEventPriorityOccupancy		: E_DALIEventPriority := E_DALIEVENTPRIORITY.Middle;
	nHoldTimerOccupancy			: WORD := 5; // Value in s. 	
	nReportTimerOccupancy		: BYTE := 120; // Value in s, Preset manufacturer value
	nDeadtimeTimerOccupancy		: WORD := 100; // Value in ms, Predefined Value of DALI Standard
	bCancelHoldTimerOccupancy	: BOOL;
	nSensitivityOccupancy		: BYTE:= 3; //setting Sensivity (0..4) 0 (Off), 1 (Min), 2(Low), 3(High) and 4 (Max)

	bEnableLuxEvent				: BOOL;
	eEventPriorityBrightness	: E_DALIEventPriority := E_DALIEVENTPRIORITY.Middle;
	nDeadtimeTimerBrightness	: WORD := 1500; // Value in ms, Predefined Value of DALI Standard
	nHysteresisBrightness		: BYTE := 2; // Value in %
	nHysteresisMinBrightness	: BYTE := 10; // Absolute Value, depending on the manufacturer specific resolution
	nReportTimerBrightness		: BYTE := 120; // Value in s, Preset manufacturer value
*)


	//ModbusComm setup
	
	fbWriteSPLuxLevel				: SH_Light.FB_TwoVal_SelectOne_RTrigChange;
	fbWritePirDelayTIme			: SH_Light.FB_TwoVal_SelectOne_RTrigChange;
	stRoomDataPLC					: SH_Light.ST_RoomDataPLC	:=	(
																	uiPirOffDelayTime	:= 30,
																	uiSpLuxLevel			:= 500,
																	uiPirDimDelayTime	:= 15,
																	uiSpDimLuxLevel		:= 200);
																	
	fbBallastOnHours				: SH_Light.FB_CountOnHours;
	bEnableHourCount			: BOOL := TRUE;								
	
	//Non-persistent modbus data
	bPirActive_MB					AT%MX92.0	: BOOL;				//bPirLys i gammel kode
	uiActLuxLevel_MB			AT%MB96		: UINT;				//intHMIAktueltLux i gammel kode
	uiActLightLevelPct_MB	AT%MB100		: UINT;				//intDALI_Gruppe1_Lysniveau i gammel kode

	//For Conversion
	uiPirOffMinutes						: UINT;
	udTimeScaling						: UDINT := 60000;
	uiLuxOn								: UINT;
	
	//max values checks
	uiMaxLuxLevel						: UINT := 1023;
	uiMaxPirOffMinutes				: UINT := 180;

END_VAR

VAR CONSTANT
	arrSensor_DALI_LINE_NUM		: ARRAY[1..2] OF BYTE := [4,3];	//korrekt rækkefølge nødvendig
	DALI_LINE_NUM_LIGHT			: BYTE := 2;
	DALI_LINE_NUM_PENDANTS: BYTE := 0; // 0 = ingen pendler

END_VAR
VAR PERSISTENT
	stPirSensorData			: SH_Light.ST_DALI_Sensor;
	arrstPirSensorDataLine	: ARRAY[1..2] OF SH_Light.ST_DALI_Sensor;
	stTuneData					: SH_Light.ST_TuneData_EX;
	
	uiPirOffDelayTime_MB		AT%MB94		: UINT;				//intHMI_Pir_SetValue i gammel kode
	uiSPLuxLevel_MB			AT%MB98	    : UINT;				//intHMI_Lux_SetValue i gammel kode
	uiBallastOnHours_MB		AT%MB102		: UINT;				//dintHMILysbraendtimer1 i gammel kode
	byOnHoursOverflowCount							: BYTE;
END_VAR

///////)






]]></Declaration>
    <Implementation>
      <ST><![CDATA[A_Buttons();
A_LightCtrl();
A_Sensor();
A_Modbuscomm();]]></ST>
    </Implementation>
    <Action Name="A_Buttons" Id="{ea525947-905e-485e-8a60-bd496c099e11}">
      <Implementation>
        <ST><![CDATA[bTopButtonZone1		:= bTopButtonZone1_Visu;
bBottomButtonZone1	:= bBottomButtonZone1_Visu;
]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_LightCtrl" Id="{e04d64b8-ffba-44aa-ab30-0ce6c28d19c5}">
      <Implementation>
        <ST><![CDATA[bNeighborRoomsPir:=	P_Gang_7_119.stPirSensorData.bPrc OR
									P_Rum_5_125.stPirSensorData.bPrc OR
									P_Rum_5_127.stPirSensorData.bPrc OR
									P_Gang_5_135A.stPirSensorData.bPrc OR
									P_Gang_5_141A.stPirSensorData.bPrc OR
									P_Rum_5_145A.stPirSensorData.bPrc OR
									P_Gang_5_149.stPirSensorData.bPrc OR
									P_Gang_5_153A.stPirSensorData.bPrc OR
P_Gang_7_119.stPirSensorData.bPrc OR
GVL_AHDataModbus.arrAH_NeighborRoomsPir  [4] [0] OR  //2-1 
GVL_AHDataModbus.arrAH_NeighborRoomsPir  [4] [1] OR //2-1 
GVL_AHDataModbus.arrAH_NeighborRoomsPir  [4] [2]  OR//2-1 
GVL_AHDataModbus.arrAH_NeighborRoomsPir  [5] [0]  OR//2-2
GVL_AHDataModbus.arrAH_NeighborRoomsPir  [5] [1]  OR//2-2
GVL_AHDataModbus.arrAH_NeighborRoomsPir  [5] [2]  OR//2-2
GVL_AHDataModbus.arrAH_NeighborRoomsPir  [5] [3]  OR//2-2
GVL_AHDataModbus.arrAH_NeighborRoomsPir  [5] [4]  OR//2-2
GVL_AHDataModbus.arrAH_NeighborRoomsPir  [5] [5]  OR//2-2
GVL_AHDataModbus.arrAH_NeighborRoomsPir  [9] [0]  OR//3-2 
GVL_AHDataModbus.arrAH_NeighborRoomsPir  [9] [1]  OR//3-2 
GVL_AHDataModbus.arrAH_NeighborRoomsPir  [9] [2]  OR//3-2 
GVL_AHDataModbus.arrAH_NeighborRoomsPir [14] [0]  OR//4-2 
GVL_AHDataModbus.arrAH_NeighborRoomsPir [14] [1]  OR//4-2 
GVL_AHDataModbus.arrAH_NeighborRoomsPir [19] [0]  OR//5-2 
GVL_AHDataModbus.arrAH_NeighborRoomsPir [19] [1]  OR//5-2 
GVL_AHDataModbus.arrAH_NeighborRoomsPir [19] [2]  ;//5-2
					

fbLys( 
	nZoneID:= 1, 
	bButtonZone1:= bTopButtonZone1,
	bBottomButtonZone1 := bBottomButtonZone1,
	bTopButtonOverride := (GVL_EnOcean.strEnOceanSwitch_AtriumNiveau_PladeB.bT2_ON OR GVL_EnOcean.strEnOceanSwitch_AtriumNiveau_Service.bT2_ON),
	bBottomButtonOverride := (GVL_EnOcean.strEnOceanSwitch_AtriumNiveau_PladeB.bT2_OFF OR GVL_EnOcean.strEnOceanSwitch_AtriumNiveau_Service.bT2_OFF),
	//bButtonZone2:= bButtonZone2,
	//bNoButtons := TRUE,
	bNeighborRoomsPir	:=	bNeighborRoomsPir,
	fLuxOn:= fLuxOn, 
	fLuxDim:= fLuxDim, 
	tPIRDim:= tPIRDim, 
	tPIROff:= tPIROff, 
	fOffsetSec:= fOffsetSec, 
	bReInit:= ,  
	stDaliSetup:= stDaliSetup, 
	ipCommunication_Prim:= P_DALI_Background.arrfbKL6821Communication[DALI_LINE_NUM_LIGHT], 
	//ipCommunication_Sec:= P_DALI_Background.arrfbKL6821Communication[DALI_LINE_NUM_LIGHT], 
	//ipCommunication_Supl:= P_DALI_Background.arrfbKL6821Communication[DALI_LINE_NUM_PENDANTS], 
	fMinOutputPowerLevelRoom:= 15, 
	fMaxOutputPowerLevelRoom:= 100, 
	nCycleTimeInMS:= SH_Light.DALI_Param.nPlcTaskCycleTimeInMS*nDimCmdCycleTimeFactor, 
	bRunTuning:= bRunTuning, 
	bOccupiedRoom=> bOccupiedRoom, 
	bError_Prim=> , 
	nError_Prim=> , 
	stTuneData:=stTuneData , 
	stPirSensorData:= stPirSensorData, 
	stLiveData:= stLiveData);
	
]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_ModbusComm" Id="{c72564ee-0ac5-47bf-a4bb-86137713077a}">
      <Implementation>
        <ST><![CDATA[//Manage data for modbus communication

//Manage data for read-only in PLC
stRoomDataPLC.bPirActive			:= stPirSensorData.bPrc;
stRoomDataPLC.uiActLuxLevel			:= TO_UINT(TRUNC(stPirSensorData.fBrightness));
stRoomDataPLC.uiActLightLevelPct	:= TO_UINT(TRUNC(fbLys.fbBallast.fActlLgtLvl_Prim));
		//stRoomDataPLC.uiActLightLevelPct	:= TO_UINT(TRUNC(fbLys.fbBallast.fActlLgtLvl_Prim)); //if only one group light control
stRoomDataPLC.uiBallastOnHours		:= uiBallastOnHours_MB; //The calculation for BallastOnHours is stored directly to the MB register below


//Assign data for read-only to MB registers
bPirActive_MB			:= stRoomDataPLC.bPirActive;
uiActLuxLevel_MB		:= stRoomDataPLC.uiActLuxLevel;
uiActLightLevelPct_MB	:= stRoomDataPLC.uiActLightLevelPct;

	//calculate BallastOnHours
	fbBallastOnHours(
		bEnableHourCount	:= bEnableHourCount,
		bPauseCount			:= fbLys.fbLightCtrl.bOffZone1,
		uiOnHours			:= uiBallastOnHours_MB,			//OnHours is updated here
		byOverflowCount		:= byOnHoursOverflowCount);


//Manage data for read/write for both PLC and MB registers
fbWriteSPLuxLevel(	nMaxValOut	:= uiMaxLuxLevel,
					nValIn1		:= uiSPLuxLevel_MB,		//nValIn1 takes priotity in case of download or restart
					nValIn2		:= stRoomDataPLC.uiSpLuxLevel,
					nValOut		=> uiLuxOn
				);


fbWritePirDelayTIme(	nMaxValOut	:= uiMaxPirOffMinutes,
						nValIn1		:= uiPirOffDelayTime_MB,		//nValIn1 takes priotity in case of download or restart
						nValIn2		:= stRoomDataPLC.uiPirOffDelayTime,
						nValOut		=> uiPirOffMinutes
					);
					

//Convert read/write modbus data to appropriate datatypes in PLC
fLuxOn	:= TO_REAL(uiLuxOn);			
tPIROff	:= TO_TIME(uiPirOffMinutes*udTimeScaling); //Time conversion defaults to ms

fLuxDim	:= TO_REAL(stRoomDataPLC.uiSpDimLuxLevel);			
tPIRDim	:= TO_TIME(stRoomDataPLC.uiPirDimDelayTime*udTimeScaling); //Time conversion defaults to ms
]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_Sensor" Id="{0541c961-4b9c-46b7-8ba1-dbdcb48c2809}">
      <Implementation>
        <ST><![CDATA[
arrfbSensorLine[1].ipCommunication := P_DALI_Background.arrfbKL6821Communication[arrSensor_DALI_LINE_NUM[1]];
arrfbSensorLine[2].ipCommunication := P_DALI_Background.arrfbKL6821Communication[arrSensor_DALI_LINE_NUM[2]];

arrfbSensorLine[1](
	arrShrtAdr:= arrSensorAddr[1],
	bInitialize:= arrInitialize[1], 
	DALI_LINE_NUM:= arrSensor_DALI_LINE_NUM[1], 
 	//bCancelHoldTimerOccupancy:= arrCancelHoldTimerOccupancyLine[1], 
	stSensorSetup := arrstDaliSensorSetup[1],
	arrInitErr=> arrInitErr[1], 
	arrInitDone=> arrInitDone[1],
	stPirSensorData:= arrstPirSensorDataLine[1], 
	arrSensorScales:= arrSensorScales[1]);


arrfbSensorLine[2](
	arrShrtAdr:= arrSensorAddr[2],
	bInitialize:= arrInitialize[2], 
	DALI_LINE_NUM:= arrSensor_DALI_LINE_NUM[2], 
 	//bCancelHoldTimerOccupancy:= arrCancelHoldTimerOccupancyLine[2], 
	stSensorSetup := arrstDaliSensorSetup[2],
	arrInitErr=> arrInitErr[2], 
	arrInitDone=> arrInitDone[2],
	stPirSensorData:= arrstPirSensorDataLine[2], 
	arrSensorScales:= arrSensorScales[2]);


//Input fra sensorer samles
stPirSensorData.fBrightness		:= MIN(arrstPirSensorDataLine[1].fBrightness, arrstPirSensorDataLine[2].fBrightness);
stPirSensorData.bPrc				:= arrstPirSensorDataLine[1].bPrc OR arrstPirSensorDataLine[2].bPrc;
stPirSensorData.bBrightnessRead	:= arrstPirSensorDataLine[1].bBrightnessRead OR arrstPirSensorDataLine[2].bBrightnessRead;

//Output til sensorer fordeles
IF stPirSensorData.bQueryBrightness THEN
	arrstPirSensorDataLine[1].bQueryBrightness := TRUE;
	arrstPirSensorDataLine[2].bQueryBrightness := TRUE;
ELSE
	arrstPirSensorDataLine[1].bQueryBrightness := FALSE;
	arrstPirSensorDataLine[2].bQueryBrightness := FALSE;
END_IF

]]></ST>
      </Implementation>
    </Action>
  </POU>
</TcPlcObject>