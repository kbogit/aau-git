<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="P_Rum_5_444" Id="{afc21685-a8be-4566-a2f3-e28869c221c4}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM P_Rum_5_444
VAR
	fbLys		: FB_Light_Type_A;
	
	stDaliSetup	: SH_Light.ST_DALI_RoomSetup := (
														byShrtAdr_Prim := 11, 
														byGrpAdr_Prim := 1, 
														eMod_Prim := E_DALIAddressType.Group, 
														//byShrtAdr_Sec := 1, 
														//byGrpAdr_Sec := 1, 
														//eMod_Sec := E_DALIAddressType.Short, 
														//eMod_Supl := E_DALIADDRESSTYPE.Short,
														//byShrtAdr_Supl := 22,
														DALI_LINE_NUM_PRIM := DALI_LINE_NUM_LIGHT, 
														DALI_LINE_NUM_SEC := 0, //0 = ingen zonestyring/vinduerække
														DALI_LINE_NUM_SUPL := DALI_LINE_NUM_PENDANTS);
														
	stLiveData				: SH_Light.ST_LiveData;
	bRunTuning					: BOOL;
	
	bTopButtonZone1				: BOOL;
	bTopButtonZone1_Visu		: BOOL;
	bBottomButtonZone1			: BOOL;
	bBottomButtonZone1_Visu	    : BOOL;
	bButtonZone2				: BOOL;
	bNeighborRoomsPir		    : BOOL;
	fLuxOn				     	: REAL;
	fLuxDim						: REAL;
	tPIRDim						: TIME;
	tPIROff						: TIME;
	fOffsetSec					: REAL := 20;
	bOccupiedRoom			    : BOOL;


// Sensor Settings
	fbSensor					: SH_Light.FB_NIKO_P46xx_1Pcs;
	bySensorAddr				: BYTE := 10;
	bInitialize				    : BOOL := TRUE;
	stDaliSensorSetup		    : ST_DALI_NIKOP46SetupData;
	bInitErr					: BOOL;
	bInitDone					: BOOL;
	arrSensorScales			    : ARRAY [1..10] OF SH_Light.ST_DALI_SensorScaleMode := [
																							(fMeassureMaxSensor := 1023, fReadMaxSensor := 1023),
																							9(())];
																			
	
	//Setup af sensorer på forskellige linjer kan ikke håndteres med ARRAYS som sædvanlig, da der kun er 1 sensor på setup 2.
	fbSensor2					: SH_Light.FB_NIKO_P46xx_1Pcs;
	bySensor2Addr				: BYTE := 7;
	bInitialize2				: BOOL := TRUE;
	stDaliSensor2Setup		    : ST_DALI_NIKOP46SetupData;
	bInitErr2					: BOOL;
	bInitDone2					: BOOL;
	arrSensor2Scales			: ARRAY [1..10] OF SH_Light.ST_DALI_SensorScaleMode := [
																							(fMeassureMaxSensor := 1023, fReadMaxSensor := 1023),
																							9(())];
																					
	bCancelHoldTimerOccupancy	: BOOL;
	
	
	//ModbusComm setup
	
	fbWriteSPLuxLevel			: SH_Light.FB_TwoVal_SelectOne_RTrigChange;
	fbWritePirDelayTIme		: SH_Light.FB_TwoVal_SelectOne_RTrigChange;
	stRoomDataPLC				: SH_Light.ST_RoomDataPLC	:=	(
																	uiPirOffDelayTime	:= 30,
																	uiSpLuxLevel		:= 500,
																	uiPirDimDelayTime	:= 15,
																	uiSpDimLuxLevel		:= 200);
																	
	fbBallastOnHours				: SH_Light.FB_CountOnHours;
	bEnableHourCount			: BOOL := TRUE;
	
	//Non-persistent modbus data
	bPirActive_MB					AT %MX920.0	: BOOL;				//bPirLys i gammel kode536.0
	uiActLuxLevel_MB			    AT %MB924	: UINT;				//intHMIAktueltLux i gammel kode540
	uiActLightLevelPct_MB	        AT %MB928	: UINT;				//intDALI_Gruppe1_Lysniveau i gammel kode544
	
	//For Conversion
	uiPirOffMinutes						: UINT;
	udTimeScaling						: UDINT := 60000;
	uiLuxOn								: UINT;
	
	//max values checks
	uiMaxLuxLevel						: UINT := 1023;
	uiMaxPirOffMinutes				    : UINT := 180;

	
END_VAR
VAR CONSTANT
	Sensor_DALI_LINE_NUM		: BYTE := 3;
	Sensor2_DALI_LINE_NUM	    : BYTE := 4;
	DALI_LINE_NUM_LIGHT			     	: BYTE := 2;
	DALI_LINE_NUM_PENDANTS	            : BYTE := 0; //0=ingen pendler	
	arrSensitivityOccupancy				: ARRAY[1..3] OF BYTE := [4,4,4]; //sensitivitet for sensor
END_VAR
VAR PERSISTENT
	stPirSensorData			: SH_Light.ST_DALI_Sensor;
	arrstPirSensorDataLine	: ARRAY[1..2] OF SH_Light.ST_DALI_Sensor;
	stTuneData: SH_Light.ST_TuneData_EX;
	
	uiPirOffDelayTime_MB	AT %MB922	: UINT;				//ntHMI_Pir_SetValue i gammel kode538
	uiSPLuxLevel_MB			AT %MB926	: UINT;				//intHMI_Lux_SetValue i gammel kode542
	uiBallastOnHours_MB		AT %MB930	: UINT;				//dintHMILysbraendtimer1 i gammel kode 546
	byOnHoursOverflowCount				: BYTE;   
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[A_Buttons();
A_LightCtrl();
A_ModbusComm();
A_Sensor();
]]></ST>
    </Implementation>
    <Action Name="A_Buttons" Id="{3067e85a-c760-4cc0-905c-6dd906a4dd32}">
      <Implementation>
        <ST><![CDATA[bTopButtonZone1		:= GVL_EnOcean.strEnOceanSwitch_Rum_5_444.bT2_ON OR bTopButtonZone1_Visu;
bBottomButtonZone1	:= GVL_EnOcean.strEnOceanSwitch_Rum_5_444.bT2_OFF OR bBottomButtonZone1_Visu;
]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_LightCtrl" Id="{c525065c-2678-4ad8-8f2d-242fd612a077}">
      <Implementation>
        <ST><![CDATA[
fbLys(
	nZoneID:= 1, 
	bButtonZone1:= bTopButtonZone1,
	bBottomButtonZone1 := bBottomButtonZone1, 
	//bButtonZone2:= bButtonZone2,
	fLuxOn:= fLuxOn, 
	fLuxDim:= fLuxDim, 
	tPIRDim:= tPIRDim, 
	tPIROff:= tPIROff, 
	fOffsetSec:= fOffsetSec, 
	bReInit:= , 
	stDaliSetup:= stDaliSetup, 
	ipCommunication_Prim:= P_DALI_Background.arrfbKL6821Communication[DALI_LINE_NUM_LIGHT], 
	//ipCommunication_Sec:= P_DALI_Background.arrfbKL6821Communication[DALI_LINE_NUM_LIGHT], 
	//ipCommunication_Supl:= P_DALI_Background.arrfbKL6821Communication[DALI_LINE_NUM_PENDANTS], 
	fMinOutputPowerLevelRoom:= 15, 
	fMaxOutputPowerLevelRoom:= 100, 
	nCycleTimeInMS:= SH_Light.DALI_Param.nPlcTaskCycleTimeInMS*nDimCmdCycleTimeFactor , 
	bRunTuning:= bRunTuning, 
	bOccupiedRoom=> bOccupiedRoom, 
	bError_Prim=> , 
	nError_Prim=> , 
	stTuneData:=stTuneData , 
	stPirSensorData:= stPirSensorData, 
	stLiveData:= stLiveData);
	]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_ModbusComm" Id="{17a0eec9-2835-4264-9797-e46b3ee08aa5}">
      <Implementation>
        <ST><![CDATA[//Manage data for modbus communication

//Manage data for read-only in PLC
stRoomDataPLC.bPirActive			:= stPirSensorData.bPrc;
stRoomDataPLC.uiActLuxLevel			:= TO_UINT(TRUNC(stPirSensorData.fBrightness));
stRoomDataPLC.uiActLightLevelPct	:= TO_UINT(TRUNC(fbLys.fbBallast.fActlLgtLvl_Prim));
		//stRoomDataPLC.uiActLightLevelPct	:= TO_UINT(TRUNC(fbLys.fbBallast.fActlLgtLvl_Prim)); //if only one group light control
stRoomDataPLC.uiBallastOnHours		:= uiBallastOnHours_MB; //The calculation for BallastOnHours is stored directly to the MB register below


//Assign data for read-only to MB registers
bPirActive_MB			:= stRoomDataPLC.bPirActive;
uiActLuxLevel_MB		:= stRoomDataPLC.uiActLuxLevel;
uiActLightLevelPct_MB	:= stRoomDataPLC.uiActLightLevelPct;

	//calculate BallastOnHours
	fbBallastOnHours(
		bEnableHourCount	:= bEnableHourCount,
		bPauseCount			:= fbLys.fbLightCtrl.bOffZone1,
		uiOnHours			:= uiBallastOnHours_MB,			//OnHours is updated here
		byOverflowCount		:= byOnHoursOverflowCount);


//Manage data for read/write for both PLC and MB registers
fbWriteSPLuxLevel(	nMaxValOut	:= uiMaxLuxLevel,
					nValIn1		:= uiSPLuxLevel_MB,		//nValIn1 takes priotity in case of download or restart
					nValIn2		:= stRoomDataPLC.uiSpLuxLevel,
					nValOut		=> uiLuxOn
				);


fbWritePirDelayTIme(	nMaxValOut	:= uiMaxPirOffMinutes,
						nValIn1		:= uiPirOffDelayTime_MB,		//nValIn1 takes priotity in case of download or restart
						nValIn2		:= stRoomDataPLC.uiPirOffDelayTime,
						nValOut		=> uiPirOffMinutes
					);
					

//Convert read/write modbus data to appropriate datatypes in PLC
fLuxOn	:= TO_REAL(uiLuxOn);			
tPIROff	:= TO_TIME(uiPirOffMinutes*udTimeScaling); //Time conversion defaults to ms

fLuxDim	:= TO_REAL(stRoomDataPLC.uiSpDimLuxLevel);			
tPIRDim	:= TO_TIME(stRoomDataPLC.uiPirDimDelayTime*udTimeScaling); //Time conversion defaults to ms
]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_Sensor" Id="{6ed6869f-954c-42ce-bf76-30d6a39619c3}">
      <Implementation>
        <ST><![CDATA[fbSensor2.ipCommunication := P_DALI_Background.arrfbKL6821Communication[Sensor2_DALI_LINE_NUM];
fbSensor.ipCommunication := P_DALI_Background.arrfbKL6821Communication[Sensor_DALI_LINE_NUM];

//only 1 sensor



fbSensor(
	byShrtAdr:= bySensorAddr,
	bInitialize:= bInitialize, 
	DALI_LINE_NUM:= Sensor_DALI_LINE_NUM, 
 	//bCancelHoldTimerOccupancy:= bCancelHoldTimerOccupancy, 
	stSensorSetup := stDaliSensorSetup,
	bInitErr=> bInitErr, 
	bInitDone=> bInitDone,
	stPirSensorData:= arrstPirSensorDataLine[1], 
	arrSensorScales:= arrSensorScales);
	
fbSensor2(
	byShrtAdr:= bySensor2Addr,
	bInitialize:= bInitialize2, 
	DALI_LINE_NUM:= Sensor2_DALI_LINE_NUM, 
 	//bCancelHoldTimerOccupancy:= bCancelHoldTimerOccupancy, 
	stSensorSetup := stDaliSensor2Setup,
	bInitErr=> bInitErr2, 
	bInitDone=> bInitDone2,
	stPirSensorData:= arrstPirSensorDataLine[2], 
	arrSensorScales:= arrSensor2Scales);


	
//Input fra sensorer samles
stPirSensorData.fBrightness		:= MIN(arrstPirSensorDataLine[1].fBrightness, arrstPirSensorDataLine[2].fBrightness);
stPirSensorData.bPrc				:= arrstPirSensorDataLine[1].bPrc OR arrstPirSensorDataLine[2].bPrc;
stPirSensorData.bBrightnessRead	:= arrstPirSensorDataLine[1].bBrightnessRead OR arrstPirSensorDataLine[2].bBrightnessRead;

//Output til sensorer fordeles
IF stPirSensorData.bQueryBrightness THEN
	arrstPirSensorDataLine[1].bQueryBrightness := TRUE;
	arrstPirSensorDataLine[2].bQueryBrightness := TRUE;
ELSE
	arrstPirSensorDataLine[1].bQueryBrightness := FALSE;
	arrstPirSensorDataLine[2].bQueryBrightness := FALSE;
END_IF
	]]></ST>
      </Implementation>
    </Action>
  </POU>
</TcPlcObject>